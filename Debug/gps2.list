
gps2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036e0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003880  08003880  00004880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038f8  080038f8  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  080038f8  080038f8  000048f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003900  08003900  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003900  08003900  00004900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003904  08003904  00004904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003908  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  2000005c  08003964  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  08003964  00005518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089ed  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000196f  00000000  00000000  0000da79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0000f3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000058e  00000000  00000000  0000fb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b6b  00000000  00000000  000100c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a5e  00000000  00000000  00025c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085f45  00000000  00000000  0002f68f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b55d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022b8  00000000  00000000  000b5618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000b78d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003868 	.word	0x08003868

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003868 	.word	0x08003868

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <separationGPSData>:
}

void separationGPSData(
		UART_HandleTypeDef* uartSendGPS,
		uint8_t* buff
		){
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]

		memset(buffStr, 0, 255);
 800058a:	22ff      	movs	r2, #255	@ 0xff
 800058c:	2100      	movs	r1, #0
 800058e:	4827      	ldr	r0, [pc, #156]	@ (800062c <separationGPSData+0xac>)
 8000590:	f002 fc7e 	bl	8002e90 <memset>
		sprintf(buffStr, "%s", buff);
 8000594:	683a      	ldr	r2, [r7, #0]
 8000596:	4926      	ldr	r1, [pc, #152]	@ (8000630 <separationGPSData+0xb0>)
 8000598:	4824      	ldr	r0, [pc, #144]	@ (800062c <separationGPSData+0xac>)
 800059a:	f002 fc59 	bl	8002e50 <siprintf>
		char *token, *expr;
		expr = strdup(buffStr); // duplicated into string
 800059e:	4823      	ldr	r0, [pc, #140]	@ (800062c <separationGPSData+0xac>)
 80005a0:	f002 fc8c 	bl	8002ebc <strdup>
 80005a4:	4603      	mov	r3, r0
 80005a6:	60bb      	str	r3, [r7, #8]

		while ((token = strsep(&expr, "\n")) != NULL) { // separate \n by \n
 80005a8:	e031      	b.n	800060e <separationGPSData+0x8e>
			memset(nmeaSnt, 0, 80);
 80005aa:	2250      	movs	r2, #80	@ 0x50
 80005ac:	2100      	movs	r1, #0
 80005ae:	4821      	ldr	r0, [pc, #132]	@ (8000634 <separationGPSData+0xb4>)
 80005b0:	f002 fc6e 	bl	8002e90 <memset>
			sprintf(nmeaSnt, "%s", token);
 80005b4:	68fa      	ldr	r2, [r7, #12]
 80005b6:	491e      	ldr	r1, [pc, #120]	@ (8000630 <separationGPSData+0xb0>)
 80005b8:	481e      	ldr	r0, [pc, #120]	@ (8000634 <separationGPSData+0xb4>)
 80005ba:	f002 fc49 	bl	8002e50 <siprintf>
		HAL_UART_Transmit(uartSendGPS, (uint8_t*) nmeaSnt, 80, 70);
 80005be:	2346      	movs	r3, #70	@ 0x46
 80005c0:	2250      	movs	r2, #80	@ 0x50
 80005c2:	491c      	ldr	r1, [pc, #112]	@ (8000634 <separationGPSData+0xb4>)
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f001 fe81 	bl	80022cc <HAL_UART_Transmit>
			if(validCondition){
 80005ca:	491b      	ldr	r1, [pc, #108]	@ (8000638 <separationGPSData+0xb8>)
 80005cc:	4819      	ldr	r0, [pc, #100]	@ (8000634 <separationGPSData+0xb4>)
 80005ce:	f002 fcbd 	bl	8002f4c <strstr>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d01a      	beq.n	800060e <separationGPSData+0x8e>
 80005d8:	4816      	ldr	r0, [pc, #88]	@ (8000634 <separationGPSData+0xb4>)
 80005da:	f7ff fe01 	bl	80001e0 <strlen>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b31      	cmp	r3, #49	@ 0x31
 80005e2:	d914      	bls.n	800060e <separationGPSData+0x8e>
 80005e4:	212a      	movs	r1, #42	@ 0x2a
 80005e6:	4813      	ldr	r0, [pc, #76]	@ (8000634 <separationGPSData+0xb4>)
 80005e8:	f002 fc5a 	bl	8002ea0 <strchr>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d00d      	beq.n	800060e <separationGPSData+0x8e>
				rawSum = strstr(nmeaSnt, "*"); // valid check
 80005f2:	212a      	movs	r1, #42	@ 0x2a
 80005f4:	480f      	ldr	r0, [pc, #60]	@ (8000634 <separationGPSData+0xb4>)
 80005f6:	f002 fc53 	bl	8002ea0 <strchr>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a0f      	ldr	r2, [pc, #60]	@ (800063c <separationGPSData+0xbc>)
 80005fe:	6013      	str	r3, [r2, #0]
				memcpy(sumNumber, rawSum+1, 2); //copy after * the check number
 8000600:	4b0e      	ldr	r3, [pc, #56]	@ (800063c <separationGPSData+0xbc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	3301      	adds	r3, #1
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	b29a      	uxth	r2, r3
 800060a:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <separationGPSData+0xc0>)
 800060c:	801a      	strh	r2, [r3, #0]
		while ((token = strsep(&expr, "\n")) != NULL) { // separate \n by \n
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	490c      	ldr	r1, [pc, #48]	@ (8000644 <separationGPSData+0xc4>)
 8000614:	4618      	mov	r0, r3
 8000616:	f002 fc6c 	bl	8002ef2 <strsep>
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d1c3      	bne.n	80005aa <separationGPSData+0x2a>
					HAL_UART_Transmit(uartSendGPS, (uint8_t*) '\n', 1, 220);
					sendLaLoUTC(uartSendGPS);*/

			}
		}
}
 8000622:	bf00      	nop
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000078 	.word	0x20000078
 8000630:	08003880 	.word	0x08003880
 8000634:	20000178 	.word	0x20000178
 8000638:	08003884 	.word	0x08003884
 800063c:	200001c8 	.word	0x200001c8
 8000640:	200001cc 	.word	0x200001cc
 8000644:	0800388c 	.word	0x0800388c

08000648 <initGPS>:
		UART_HandleTypeDef* uartGetGPS,
		UART_HandleTypeDef* uartSendGPS,
		uint8_t* buff, uint8_t len,
		uint8_t* isReady,
		char* sepp
		){
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
 8000654:	70fb      	strb	r3, [r7, #3]
		sep = sepp;
 8000656:	4a0e      	ldr	r2, [pc, #56]	@ (8000690 <initGPS+0x48>)
 8000658:	69fb      	ldr	r3, [r7, #28]
 800065a:	6013      	str	r3, [r2, #0]
		enter = "\n";
 800065c:	4b0d      	ldr	r3, [pc, #52]	@ (8000694 <initGPS+0x4c>)
 800065e:	4a0e      	ldr	r2, [pc, #56]	@ (8000698 <initGPS+0x50>)
 8000660:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_DMA(uartGetGPS, buff, len);
 8000662:	78fb      	ldrb	r3, [r7, #3]
 8000664:	b29b      	uxth	r3, r3
 8000666:	461a      	mov	r2, r3
 8000668:	6879      	ldr	r1, [r7, #4]
 800066a:	68f8      	ldr	r0, [r7, #12]
 800066c:	f001 feb9 	bl	80023e2 <HAL_UART_Receive_DMA>
		if(*isReady == 1){
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d106      	bne.n	8000686 <initGPS+0x3e>
			//HAL_UART_Transmit(uartSendGPS, (uint8_t*) buff, 255, 100);
			separationGPSData(uartSendGPS, buff);
 8000678:	6879      	ldr	r1, [r7, #4]
 800067a:	68b8      	ldr	r0, [r7, #8]
 800067c:	f7ff ff80 	bl	8000580 <separationGPSData>
			*isReady = 0;
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
		}

}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200001d0 	.word	0x200001d0
 8000694:	200001d4 	.word	0x200001d4
 8000698:	0800388c 	.word	0x0800388c

0800069c <HAL_UART_RxCpltCallback>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USER CODE BEGIN PV */
uint8_t buff[255];
uint8_t ready = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {ready = 1;}
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	4b04      	ldr	r3, [pc, #16]	@ (80006b8 <HAL_UART_RxCpltCallback+0x1c>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	701a      	strb	r2, [r3, #0]
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	200003c7 	.word	0x200003c7

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c2:	f000 fabf 	bl	8000c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c6:	f000 f823 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ca:	f000 f8fd 	bl	80008c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80006ce:	f000 f8db 	bl	8000888 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006d2:	f000 f885 	bl	80007e0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006d6:	f000 f8ad 	bl	8000834 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  initGPS(
 80006da:	4b08      	ldr	r3, [pc, #32]	@ (80006fc <main+0x40>)
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <main+0x44>)
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	23ff      	movs	r3, #255	@ 0xff
 80006e4:	4a07      	ldr	r2, [pc, #28]	@ (8000704 <main+0x48>)
 80006e6:	4908      	ldr	r1, [pc, #32]	@ (8000708 <main+0x4c>)
 80006e8:	4808      	ldr	r0, [pc, #32]	@ (800070c <main+0x50>)
 80006ea:	f7ff ffad 	bl	8000648 <initGPS>
	 			  buff,
	 			  255,
	 			  &ready,
	 			  " "
	 			  );
	 	  HAL_Delay(300);
 80006ee:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80006f2:	f000 fb19 	bl	8000d28 <HAL_Delay>
	  initGPS(
 80006f6:	bf00      	nop
 80006f8:	e7ef      	b.n	80006da <main+0x1e>
 80006fa:	bf00      	nop
 80006fc:	080038a0 	.word	0x080038a0
 8000700:	200003c7 	.word	0x200003c7
 8000704:	200002c8 	.word	0x200002c8
 8000708:	20000220 	.word	0x20000220
 800070c:	200001d8 	.word	0x200001d8

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b094      	sub	sp, #80	@ 0x50
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0320 	add.w	r3, r7, #32
 800071a:	2230      	movs	r2, #48	@ 0x30
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f002 fbb6 	bl	8002e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000734:	2300      	movs	r3, #0
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	4b27      	ldr	r3, [pc, #156]	@ (80007d8 <SystemClock_Config+0xc8>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073c:	4a26      	ldr	r2, [pc, #152]	@ (80007d8 <SystemClock_Config+0xc8>)
 800073e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000742:	6413      	str	r3, [r2, #64]	@ 0x40
 8000744:	4b24      	ldr	r3, [pc, #144]	@ (80007d8 <SystemClock_Config+0xc8>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000750:	2300      	movs	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	4b21      	ldr	r3, [pc, #132]	@ (80007dc <SystemClock_Config+0xcc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a20      	ldr	r2, [pc, #128]	@ (80007dc <SystemClock_Config+0xcc>)
 800075a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b1e      	ldr	r3, [pc, #120]	@ (80007dc <SystemClock_Config+0xcc>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800076c:	2301      	movs	r3, #1
 800076e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000770:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000774:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000776:	2302      	movs	r3, #2
 8000778:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800077e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000780:	230c      	movs	r3, #12
 8000782:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000784:	2332      	movs	r3, #50	@ 0x32
 8000786:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000788:	2302      	movs	r3, #2
 800078a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800078c:	2304      	movs	r3, #4
 800078e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 0320 	add.w	r3, r7, #32
 8000794:	4618      	mov	r0, r3
 8000796:	f001 f8f1 	bl	800197c <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007a0:	f000 f8c8 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	230f      	movs	r3, #15
 80007a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a8:	2302      	movs	r3, #2
 80007aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	2101      	movs	r1, #1
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 fb53 	bl	8001e6c <HAL_RCC_ClockConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007cc:	f000 f8b2 	bl	8000934 <Error_Handler>
  }
}
 80007d0:	bf00      	nop
 80007d2:	3750      	adds	r7, #80	@ 0x50
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40007000 	.word	0x40007000

080007e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007e4:	4b11      	ldr	r3, [pc, #68]	@ (800082c <MX_USART1_UART_Init+0x4c>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	@ (8000830 <MX_USART1_UART_Init+0x50>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ea:	4b10      	ldr	r3, [pc, #64]	@ (800082c <MX_USART1_UART_Init+0x4c>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_USART1_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <MX_USART1_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <MX_USART1_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_USART1_UART_Init+0x4c>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b08      	ldr	r3, [pc, #32]	@ (800082c <MX_USART1_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <MX_USART1_UART_Init+0x4c>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	@ (800082c <MX_USART1_UART_Init+0x4c>)
 8000818:	f001 fd08 	bl	800222c <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000822:	f000 f887 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200001d8 	.word	0x200001d8
 8000830:	40011000 	.word	0x40011000

08000834 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000838:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_USART2_UART_Init+0x4c>)
 800083a:	4a12      	ldr	r2, [pc, #72]	@ (8000884 <MX_USART2_UART_Init+0x50>)
 800083c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800083e:	4b10      	ldr	r3, [pc, #64]	@ (8000880 <MX_USART2_UART_Init+0x4c>)
 8000840:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000844:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <MX_USART2_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <MX_USART2_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <MX_USART2_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <MX_USART2_UART_Init+0x4c>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <MX_USART2_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <MX_USART2_UART_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	@ (8000880 <MX_USART2_UART_Init+0x4c>)
 800086c:	f001 fcde 	bl	800222c <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000876:	f000 f85d 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000220 	.word	0x20000220
 8000884:	40004400 	.word	0x40004400

08000888 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <MX_DMA_Init+0x3c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a0b      	ldr	r2, [pc, #44]	@ (80008c4 <MX_DMA_Init+0x3c>)
 8000898:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <MX_DMA_Init+0x3c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	203a      	movs	r0, #58	@ 0x3a
 80008b0:	f000 fb39 	bl	8000f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008b4:	203a      	movs	r0, #58	@ 0x3a
 80008b6:	f000 fb52 	bl	8000f5e <HAL_NVIC_EnableIRQ>

}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <MX_GPIO_Init+0x68>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a16      	ldr	r2, [pc, #88]	@ (8000930 <MX_GPIO_Init+0x68>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <MX_GPIO_Init+0x68>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <MX_GPIO_Init+0x68>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000930 <MX_GPIO_Init+0x68>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000930 <MX_GPIO_Init+0x68>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <MX_GPIO_Init+0x68>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a08      	ldr	r2, [pc, #32]	@ (8000930 <MX_GPIO_Init+0x68>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <MX_GPIO_Init+0x68>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000922:	bf00      	nop
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <Error_Handler+0x8>

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b10      	ldr	r3, [pc, #64]	@ (800098c <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094e:	4a0f      	ldr	r2, [pc, #60]	@ (800098c <HAL_MspInit+0x4c>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000954:	6453      	str	r3, [r2, #68]	@ 0x44
 8000956:	4b0d      	ldr	r3, [pc, #52]	@ (800098c <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	4b09      	ldr	r3, [pc, #36]	@ (800098c <HAL_MspInit+0x4c>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096a:	4a08      	ldr	r2, [pc, #32]	@ (800098c <HAL_MspInit+0x4c>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000970:	6413      	str	r3, [r2, #64]	@ 0x40
 8000972:	4b06      	ldr	r3, [pc, #24]	@ (800098c <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	@ 0x30
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a49      	ldr	r2, [pc, #292]	@ (8000ad4 <HAL_UART_MspInit+0x144>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d15b      	bne.n	8000a6a <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	61bb      	str	r3, [r7, #24]
 80009b6:	4b48      	ldr	r3, [pc, #288]	@ (8000ad8 <HAL_UART_MspInit+0x148>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ba:	4a47      	ldr	r2, [pc, #284]	@ (8000ad8 <HAL_UART_MspInit+0x148>)
 80009bc:	f043 0310 	orr.w	r3, r3, #16
 80009c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009c2:	4b45      	ldr	r3, [pc, #276]	@ (8000ad8 <HAL_UART_MspInit+0x148>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c6:	f003 0310 	and.w	r3, r3, #16
 80009ca:	61bb      	str	r3, [r7, #24]
 80009cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	4b41      	ldr	r3, [pc, #260]	@ (8000ad8 <HAL_UART_MspInit+0x148>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a40      	ldr	r2, [pc, #256]	@ (8000ad8 <HAL_UART_MspInit+0x148>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b3e      	ldr	r3, [pc, #248]	@ (8000ad8 <HAL_UART_MspInit+0x148>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009ea:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f8:	2303      	movs	r3, #3
 80009fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009fc:	2307      	movs	r3, #7
 80009fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	4835      	ldr	r0, [pc, #212]	@ (8000adc <HAL_UART_MspInit+0x14c>)
 8000a08:	f000 fe34 	bl	8001674 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000a0c:	4b34      	ldr	r3, [pc, #208]	@ (8000ae0 <HAL_UART_MspInit+0x150>)
 8000a0e:	4a35      	ldr	r2, [pc, #212]	@ (8000ae4 <HAL_UART_MspInit+0x154>)
 8000a10:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000a12:	4b33      	ldr	r3, [pc, #204]	@ (8000ae0 <HAL_UART_MspInit+0x150>)
 8000a14:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000a18:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a1a:	4b31      	ldr	r3, [pc, #196]	@ (8000ae0 <HAL_UART_MspInit+0x150>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a20:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae0 <HAL_UART_MspInit+0x150>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a26:	4b2e      	ldr	r3, [pc, #184]	@ (8000ae0 <HAL_UART_MspInit+0x150>)
 8000a28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a2c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae0 <HAL_UART_MspInit+0x150>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a34:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae0 <HAL_UART_MspInit+0x150>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000a3a:	4b29      	ldr	r3, [pc, #164]	@ (8000ae0 <HAL_UART_MspInit+0x150>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a40:	4b27      	ldr	r3, [pc, #156]	@ (8000ae0 <HAL_UART_MspInit+0x150>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a46:	4b26      	ldr	r3, [pc, #152]	@ (8000ae0 <HAL_UART_MspInit+0x150>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a4c:	4824      	ldr	r0, [pc, #144]	@ (8000ae0 <HAL_UART_MspInit+0x150>)
 8000a4e:	f000 faa1 	bl	8000f94 <HAL_DMA_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000a58:	f7ff ff6c 	bl	8000934 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a20      	ldr	r2, [pc, #128]	@ (8000ae0 <HAL_UART_MspInit+0x150>)
 8000a60:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a62:	4a1f      	ldr	r2, [pc, #124]	@ (8000ae0 <HAL_UART_MspInit+0x150>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a68:	e030      	b.n	8000acc <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ae8 <HAL_UART_MspInit+0x158>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d12b      	bne.n	8000acc <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <HAL_UART_MspInit+0x148>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7c:	4a16      	ldr	r2, [pc, #88]	@ (8000ad8 <HAL_UART_MspInit+0x148>)
 8000a7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a84:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <HAL_UART_MspInit+0x148>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <HAL_UART_MspInit+0x148>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a98:	4a0f      	ldr	r2, [pc, #60]	@ (8000ad8 <HAL_UART_MspInit+0x148>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad8 <HAL_UART_MspInit+0x148>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aac:	230c      	movs	r3, #12
 8000aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000abc:	2307      	movs	r3, #7
 8000abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4805      	ldr	r0, [pc, #20]	@ (8000adc <HAL_UART_MspInit+0x14c>)
 8000ac8:	f000 fdd4 	bl	8001674 <HAL_GPIO_Init>
}
 8000acc:	bf00      	nop
 8000ace:	3730      	adds	r7, #48	@ 0x30
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40011000 	.word	0x40011000
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	20000268 	.word	0x20000268
 8000ae4:	40026440 	.word	0x40026440
 8000ae8:	40004400 	.word	0x40004400

08000aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <NMI_Handler+0x4>

08000af4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <HardFault_Handler+0x4>

08000afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <MemManage_Handler+0x4>

08000b04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b42:	f000 f8d1 	bl	8000ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b50:	4802      	ldr	r0, [pc, #8]	@ (8000b5c <DMA2_Stream2_IRQHandler+0x10>)
 8000b52:	f000 fb25 	bl	80011a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000268 	.word	0x20000268

08000b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b68:	4a14      	ldr	r2, [pc, #80]	@ (8000bbc <_sbrk+0x5c>)
 8000b6a:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <_sbrk+0x60>)
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b74:	4b13      	ldr	r3, [pc, #76]	@ (8000bc4 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d102      	bne.n	8000b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <_sbrk+0x64>)
 8000b7e:	4a12      	ldr	r2, [pc, #72]	@ (8000bc8 <_sbrk+0x68>)
 8000b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b82:	4b10      	ldr	r3, [pc, #64]	@ (8000bc4 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d207      	bcs.n	8000ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b90:	f002 f9f2 	bl	8002f78 <__errno>
 8000b94:	4603      	mov	r3, r0
 8000b96:	220c      	movs	r2, #12
 8000b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9e:	e009      	b.n	8000bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba0:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ba6:	4b07      	ldr	r3, [pc, #28]	@ (8000bc4 <_sbrk+0x64>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	4a05      	ldr	r2, [pc, #20]	@ (8000bc4 <_sbrk+0x64>)
 8000bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20020000 	.word	0x20020000
 8000bc0:	00000400 	.word	0x00000400
 8000bc4:	200003c8 	.word	0x200003c8
 8000bc8:	20000518 	.word	0x20000518

08000bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd0:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <SystemInit+0x20>)
 8000bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bd6:	4a05      	ldr	r2, [pc, #20]	@ (8000bec <SystemInit+0x20>)
 8000bd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bdc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bf0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bf4:	f7ff ffea 	bl	8000bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf8:	480c      	ldr	r0, [pc, #48]	@ (8000c2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bfa:	490d      	ldr	r1, [pc, #52]	@ (8000c30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c00:	e002      	b.n	8000c08 <LoopCopyDataInit>

08000c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c06:	3304      	adds	r3, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c0c:	d3f9      	bcc.n	8000c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c10:	4c0a      	ldr	r4, [pc, #40]	@ (8000c3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c14:	e001      	b.n	8000c1a <LoopFillZerobss>

08000c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c18:	3204      	adds	r2, #4

08000c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c1c:	d3fb      	bcc.n	8000c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c1e:	f002 f9b1 	bl	8002f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c22:	f7ff fd4b 	bl	80006bc <main>
  bx  lr    
 8000c26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c34:	08003908 	.word	0x08003908
  ldr r2, =_sbss
 8000c38:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c3c:	20000518 	.word	0x20000518

08000c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC_IRQHandler>
	...

08000c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c48:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c84 <HAL_Init+0x40>)
 8000c4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c54:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <HAL_Init+0x40>)
 8000c5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c60:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a07      	ldr	r2, [pc, #28]	@ (8000c84 <HAL_Init+0x40>)
 8000c66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f000 f94f 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c72:	200f      	movs	r0, #15
 8000c74:	f000 f808 	bl	8000c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c78:	f7ff fe62 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023c00 	.word	0x40023c00

08000c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c90:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <HAL_InitTick+0x54>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <HAL_InitTick+0x58>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f967 	bl	8000f7a <HAL_SYSTICK_Config>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00e      	b.n	8000cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d80a      	bhi.n	8000cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f000 f92f 	bl	8000f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc8:	4a06      	ldr	r2, [pc, #24]	@ (8000ce4 <HAL_InitTick+0x5c>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e000      	b.n	8000cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20000004 	.word	0x20000004

08000ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	200003cc 	.word	0x200003cc

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	@ (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	200003cc 	.word	0x200003cc

08000d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d30:	f7ff ffee 	bl	8000d10 <HAL_GetTick>
 8000d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d40:	d005      	beq.n	8000d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d42:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <HAL_Delay+0x44>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d4e:	bf00      	nop
 8000d50:	f7ff ffde 	bl	8000d10 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d8f7      	bhi.n	8000d50 <HAL_Delay+0x28>
  {
  }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	@ (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4907      	ldr	r1, [pc, #28]	@ (8000e0c <__NVIC_EnableIRQ+0x38>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	@ (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	@ (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	@ 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
         );
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	@ 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000edc:	d301      	bcc.n	8000ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00f      	b.n	8000f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f0c <SysTick_Config+0x40>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eea:	210f      	movs	r1, #15
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f7ff ff8e 	bl	8000e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef4:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <SysTick_Config+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <SysTick_Config+0x40>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010

08000f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff29 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f38:	f7ff ff3e 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff ff8e 	bl	8000e64 <NVIC_EncodePriority>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff5d 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff31 	bl	8000dd4 <__NVIC_EnableIRQ>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffa2 	bl	8000ecc <SysTick_Config>
 8000f88:	4603      	mov	r3, r0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000fa0:	f7ff feb6 	bl	8000d10 <HAL_GetTick>
 8000fa4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d101      	bne.n	8000fb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e099      	b.n	80010e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f022 0201 	bic.w	r2, r2, #1
 8000fce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fd0:	e00f      	b.n	8000ff2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fd2:	f7ff fe9d 	bl	8000d10 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b05      	cmp	r3, #5
 8000fde:	d908      	bls.n	8000ff2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2220      	movs	r2, #32
 8000fe4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2203      	movs	r2, #3
 8000fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e078      	b.n	80010e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1e8      	bne.n	8000fd2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	4b38      	ldr	r3, [pc, #224]	@ (80010ec <HAL_DMA_Init+0x158>)
 800100c:	4013      	ands	r3, r2
 800100e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800101e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800102a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001036:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a1b      	ldr	r3, [r3, #32]
 800103c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	4313      	orrs	r3, r2
 8001042:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001048:	2b04      	cmp	r3, #4
 800104a:	d107      	bne.n	800105c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001054:	4313      	orrs	r3, r2
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	4313      	orrs	r3, r2
 800105a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	f023 0307 	bic.w	r3, r3, #7
 8001072:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	4313      	orrs	r3, r2
 800107c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001082:	2b04      	cmp	r3, #4
 8001084:	d117      	bne.n	80010b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	4313      	orrs	r3, r2
 800108e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00e      	beq.n	80010b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 fa6f 	bl	800157c <DMA_CheckFifoParam>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d008      	beq.n	80010b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2240      	movs	r2, #64	@ 0x40
 80010a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2201      	movs	r2, #1
 80010ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80010b2:	2301      	movs	r3, #1
 80010b4:	e016      	b.n	80010e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 fa26 	bl	8001510 <DMA_CalcBaseAndBitshift>
 80010c4:	4603      	mov	r3, r0
 80010c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010cc:	223f      	movs	r2, #63	@ 0x3f
 80010ce:	409a      	lsls	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2201      	movs	r2, #1
 80010de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	f010803f 	.word	0xf010803f

080010f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
 80010fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010fe:	2300      	movs	r3, #0
 8001100:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001106:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800110e:	2b01      	cmp	r3, #1
 8001110:	d101      	bne.n	8001116 <HAL_DMA_Start_IT+0x26>
 8001112:	2302      	movs	r3, #2
 8001114:	e040      	b.n	8001198 <HAL_DMA_Start_IT+0xa8>
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2201      	movs	r2, #1
 800111a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b01      	cmp	r3, #1
 8001128:	d12f      	bne.n	800118a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2202      	movs	r2, #2
 800112e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2200      	movs	r2, #0
 8001136:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f000 f9b8 	bl	80014b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001148:	223f      	movs	r2, #63	@ 0x3f
 800114a:	409a      	lsls	r2, r3
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0216 	orr.w	r2, r2, #22
 800115e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001164:	2b00      	cmp	r3, #0
 8001166:	d007      	beq.n	8001178 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 0208 	orr.w	r2, r2, #8
 8001176:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f042 0201 	orr.w	r2, r2, #1
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	e005      	b.n	8001196 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001192:	2302      	movs	r3, #2
 8001194:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001196:	7dfb      	ldrb	r3, [r7, #23]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80011ac:	4b8e      	ldr	r3, [pc, #568]	@ (80013e8 <HAL_DMA_IRQHandler+0x248>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a8e      	ldr	r2, [pc, #568]	@ (80013ec <HAL_DMA_IRQHandler+0x24c>)
 80011b2:	fba2 2303 	umull	r2, r3, r2, r3
 80011b6:	0a9b      	lsrs	r3, r3, #10
 80011b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011ca:	2208      	movs	r2, #8
 80011cc:	409a      	lsls	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4013      	ands	r3, r2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d01a      	beq.n	800120c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d013      	beq.n	800120c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0204 	bic.w	r2, r2, #4
 80011f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011f8:	2208      	movs	r2, #8
 80011fa:	409a      	lsls	r2, r3
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001204:	f043 0201 	orr.w	r2, r3, #1
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001210:	2201      	movs	r2, #1
 8001212:	409a      	lsls	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4013      	ands	r3, r2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d012      	beq.n	8001242 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00b      	beq.n	8001242 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800122e:	2201      	movs	r2, #1
 8001230:	409a      	lsls	r2, r3
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800123a:	f043 0202 	orr.w	r2, r3, #2
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001246:	2204      	movs	r2, #4
 8001248:	409a      	lsls	r2, r3
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4013      	ands	r3, r2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d012      	beq.n	8001278 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00b      	beq.n	8001278 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001264:	2204      	movs	r2, #4
 8001266:	409a      	lsls	r2, r3
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001270:	f043 0204 	orr.w	r2, r3, #4
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800127c:	2210      	movs	r2, #16
 800127e:	409a      	lsls	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4013      	ands	r3, r2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d043      	beq.n	8001310 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	2b00      	cmp	r3, #0
 8001294:	d03c      	beq.n	8001310 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800129a:	2210      	movs	r2, #16
 800129c:	409a      	lsls	r2, r3
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d018      	beq.n	80012e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d108      	bne.n	80012d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d024      	beq.n	8001310 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	4798      	blx	r3
 80012ce:	e01f      	b.n	8001310 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d01b      	beq.n	8001310 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	4798      	blx	r3
 80012e0:	e016      	b.n	8001310 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d107      	bne.n	8001300 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0208 	bic.w	r2, r2, #8
 80012fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001314:	2220      	movs	r2, #32
 8001316:	409a      	lsls	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4013      	ands	r3, r2
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 808f 	beq.w	8001440 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0310 	and.w	r3, r3, #16
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 8087 	beq.w	8001440 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001336:	2220      	movs	r2, #32
 8001338:	409a      	lsls	r2, r3
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b05      	cmp	r3, #5
 8001348:	d136      	bne.n	80013b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 0216 	bic.w	r2, r2, #22
 8001358:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	695a      	ldr	r2, [r3, #20]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001368:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	2b00      	cmp	r3, #0
 8001370:	d103      	bne.n	800137a <HAL_DMA_IRQHandler+0x1da>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001376:	2b00      	cmp	r3, #0
 8001378:	d007      	beq.n	800138a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0208 	bic.w	r2, r2, #8
 8001388:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800138e:	223f      	movs	r2, #63	@ 0x3f
 8001390:	409a      	lsls	r2, r3
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d07e      	beq.n	80014ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	4798      	blx	r3
        }
        return;
 80013b6:	e079      	b.n	80014ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d01d      	beq.n	8001402 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d10d      	bne.n	80013f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d031      	beq.n	8001440 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	4798      	blx	r3
 80013e4:	e02c      	b.n	8001440 <HAL_DMA_IRQHandler+0x2a0>
 80013e6:	bf00      	nop
 80013e8:	20000000 	.word	0x20000000
 80013ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d023      	beq.n	8001440 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	4798      	blx	r3
 8001400:	e01e      	b.n	8001440 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800140c:	2b00      	cmp	r3, #0
 800140e:	d10f      	bne.n	8001430 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0210 	bic.w	r2, r2, #16
 800141e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001444:	2b00      	cmp	r3, #0
 8001446:	d032      	beq.n	80014ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d022      	beq.n	800149a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2205      	movs	r2, #5
 8001458:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 0201 	bic.w	r2, r2, #1
 800146a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	3301      	adds	r3, #1
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	429a      	cmp	r2, r3
 8001476:	d307      	bcc.n	8001488 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f2      	bne.n	800146c <HAL_DMA_IRQHandler+0x2cc>
 8001486:	e000      	b.n	800148a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001488:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2201      	movs	r2, #1
 800148e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d005      	beq.n	80014ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	4798      	blx	r3
 80014aa:	e000      	b.n	80014ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80014ac:	bf00      	nop
    }
  }
}
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
 80014c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80014d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b40      	cmp	r3, #64	@ 0x40
 80014e0:	d108      	bne.n	80014f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80014f2:	e007      	b.n	8001504 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	60da      	str	r2, [r3, #12]
}
 8001504:	bf00      	nop
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	3b10      	subs	r3, #16
 8001520:	4a14      	ldr	r2, [pc, #80]	@ (8001574 <DMA_CalcBaseAndBitshift+0x64>)
 8001522:	fba2 2303 	umull	r2, r3, r2, r3
 8001526:	091b      	lsrs	r3, r3, #4
 8001528:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800152a:	4a13      	ldr	r2, [pc, #76]	@ (8001578 <DMA_CalcBaseAndBitshift+0x68>)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4413      	add	r3, r2
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2b03      	cmp	r3, #3
 800153c:	d909      	bls.n	8001552 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001546:	f023 0303 	bic.w	r3, r3, #3
 800154a:	1d1a      	adds	r2, r3, #4
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001550:	e007      	b.n	8001562 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800155a:	f023 0303 	bic.w	r3, r3, #3
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001566:	4618      	mov	r0, r3
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	aaaaaaab 	.word	0xaaaaaaab
 8001578:	080038bc 	.word	0x080038bc

0800157c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800158c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d11f      	bne.n	80015d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	2b03      	cmp	r3, #3
 800159a:	d856      	bhi.n	800164a <DMA_CheckFifoParam+0xce>
 800159c:	a201      	add	r2, pc, #4	@ (adr r2, 80015a4 <DMA_CheckFifoParam+0x28>)
 800159e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a2:	bf00      	nop
 80015a4:	080015b5 	.word	0x080015b5
 80015a8:	080015c7 	.word	0x080015c7
 80015ac:	080015b5 	.word	0x080015b5
 80015b0:	0800164b 	.word	0x0800164b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d046      	beq.n	800164e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015c4:	e043      	b.n	800164e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80015ce:	d140      	bne.n	8001652 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015d4:	e03d      	b.n	8001652 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015de:	d121      	bne.n	8001624 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d837      	bhi.n	8001656 <DMA_CheckFifoParam+0xda>
 80015e6:	a201      	add	r2, pc, #4	@ (adr r2, 80015ec <DMA_CheckFifoParam+0x70>)
 80015e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ec:	080015fd 	.word	0x080015fd
 80015f0:	08001603 	.word	0x08001603
 80015f4:	080015fd 	.word	0x080015fd
 80015f8:	08001615 	.word	0x08001615
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
      break;
 8001600:	e030      	b.n	8001664 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001606:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d025      	beq.n	800165a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001612:	e022      	b.n	800165a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001618:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800161c:	d11f      	bne.n	800165e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001622:	e01c      	b.n	800165e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d903      	bls.n	8001632 <DMA_CheckFifoParam+0xb6>
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	2b03      	cmp	r3, #3
 800162e:	d003      	beq.n	8001638 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001630:	e018      	b.n	8001664 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	73fb      	strb	r3, [r7, #15]
      break;
 8001636:	e015      	b.n	8001664 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800163c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d00e      	beq.n	8001662 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	73fb      	strb	r3, [r7, #15]
      break;
 8001648:	e00b      	b.n	8001662 <DMA_CheckFifoParam+0xe6>
      break;
 800164a:	bf00      	nop
 800164c:	e00a      	b.n	8001664 <DMA_CheckFifoParam+0xe8>
      break;
 800164e:	bf00      	nop
 8001650:	e008      	b.n	8001664 <DMA_CheckFifoParam+0xe8>
      break;
 8001652:	bf00      	nop
 8001654:	e006      	b.n	8001664 <DMA_CheckFifoParam+0xe8>
      break;
 8001656:	bf00      	nop
 8001658:	e004      	b.n	8001664 <DMA_CheckFifoParam+0xe8>
      break;
 800165a:	bf00      	nop
 800165c:	e002      	b.n	8001664 <DMA_CheckFifoParam+0xe8>
      break;   
 800165e:	bf00      	nop
 8001660:	e000      	b.n	8001664 <DMA_CheckFifoParam+0xe8>
      break;
 8001662:	bf00      	nop
    }
  } 
  
  return status; 
 8001664:	7bfb      	ldrb	r3, [r7, #15]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop

08001674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001674:	b480      	push	{r7}
 8001676:	b089      	sub	sp, #36	@ 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001686:	2300      	movs	r3, #0
 8001688:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
 800168e:	e159      	b.n	8001944 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001690:	2201      	movs	r2, #1
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	f040 8148 	bne.w	800193e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d005      	beq.n	80016c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d130      	bne.n	8001728 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	2203      	movs	r2, #3
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4013      	ands	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016fc:	2201      	movs	r2, #1
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	091b      	lsrs	r3, r3, #4
 8001712:	f003 0201 	and.w	r2, r3, #1
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b03      	cmp	r3, #3
 8001732:	d017      	beq.n	8001764 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	2203      	movs	r2, #3
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d123      	bne.n	80017b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	08da      	lsrs	r2, r3, #3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3208      	adds	r2, #8
 8001778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	220f      	movs	r2, #15
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	691a      	ldr	r2, [r3, #16]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	08da      	lsrs	r2, r3, #3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3208      	adds	r2, #8
 80017b2:	69b9      	ldr	r1, [r7, #24]
 80017b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	2203      	movs	r2, #3
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0203 	and.w	r2, r3, #3
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 80a2 	beq.w	800193e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b57      	ldr	r3, [pc, #348]	@ (800195c <HAL_GPIO_Init+0x2e8>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	4a56      	ldr	r2, [pc, #344]	@ (800195c <HAL_GPIO_Init+0x2e8>)
 8001804:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001808:	6453      	str	r3, [r2, #68]	@ 0x44
 800180a:	4b54      	ldr	r3, [pc, #336]	@ (800195c <HAL_GPIO_Init+0x2e8>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001816:	4a52      	ldr	r2, [pc, #328]	@ (8001960 <HAL_GPIO_Init+0x2ec>)
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	089b      	lsrs	r3, r3, #2
 800181c:	3302      	adds	r3, #2
 800181e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	220f      	movs	r2, #15
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a49      	ldr	r2, [pc, #292]	@ (8001964 <HAL_GPIO_Init+0x2f0>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d019      	beq.n	8001876 <HAL_GPIO_Init+0x202>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a48      	ldr	r2, [pc, #288]	@ (8001968 <HAL_GPIO_Init+0x2f4>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d013      	beq.n	8001872 <HAL_GPIO_Init+0x1fe>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a47      	ldr	r2, [pc, #284]	@ (800196c <HAL_GPIO_Init+0x2f8>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d00d      	beq.n	800186e <HAL_GPIO_Init+0x1fa>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a46      	ldr	r2, [pc, #280]	@ (8001970 <HAL_GPIO_Init+0x2fc>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d007      	beq.n	800186a <HAL_GPIO_Init+0x1f6>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a45      	ldr	r2, [pc, #276]	@ (8001974 <HAL_GPIO_Init+0x300>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d101      	bne.n	8001866 <HAL_GPIO_Init+0x1f2>
 8001862:	2304      	movs	r3, #4
 8001864:	e008      	b.n	8001878 <HAL_GPIO_Init+0x204>
 8001866:	2307      	movs	r3, #7
 8001868:	e006      	b.n	8001878 <HAL_GPIO_Init+0x204>
 800186a:	2303      	movs	r3, #3
 800186c:	e004      	b.n	8001878 <HAL_GPIO_Init+0x204>
 800186e:	2302      	movs	r3, #2
 8001870:	e002      	b.n	8001878 <HAL_GPIO_Init+0x204>
 8001872:	2301      	movs	r3, #1
 8001874:	e000      	b.n	8001878 <HAL_GPIO_Init+0x204>
 8001876:	2300      	movs	r3, #0
 8001878:	69fa      	ldr	r2, [r7, #28]
 800187a:	f002 0203 	and.w	r2, r2, #3
 800187e:	0092      	lsls	r2, r2, #2
 8001880:	4093      	lsls	r3, r2
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001888:	4935      	ldr	r1, [pc, #212]	@ (8001960 <HAL_GPIO_Init+0x2ec>)
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	089b      	lsrs	r3, r3, #2
 800188e:	3302      	adds	r3, #2
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001896:	4b38      	ldr	r3, [pc, #224]	@ (8001978 <HAL_GPIO_Init+0x304>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018ba:	4a2f      	ldr	r2, [pc, #188]	@ (8001978 <HAL_GPIO_Init+0x304>)
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001978 <HAL_GPIO_Init+0x304>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018e4:	4a24      	ldr	r2, [pc, #144]	@ (8001978 <HAL_GPIO_Init+0x304>)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018ea:	4b23      	ldr	r3, [pc, #140]	@ (8001978 <HAL_GPIO_Init+0x304>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	43db      	mvns	r3, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800190e:	4a1a      	ldr	r2, [pc, #104]	@ (8001978 <HAL_GPIO_Init+0x304>)
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001914:	4b18      	ldr	r3, [pc, #96]	@ (8001978 <HAL_GPIO_Init+0x304>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001938:	4a0f      	ldr	r2, [pc, #60]	@ (8001978 <HAL_GPIO_Init+0x304>)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3301      	adds	r3, #1
 8001942:	61fb      	str	r3, [r7, #28]
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	2b0f      	cmp	r3, #15
 8001948:	f67f aea2 	bls.w	8001690 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	3724      	adds	r7, #36	@ 0x24
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800
 8001960:	40013800 	.word	0x40013800
 8001964:	40020000 	.word	0x40020000
 8001968:	40020400 	.word	0x40020400
 800196c:	40020800 	.word	0x40020800
 8001970:	40020c00 	.word	0x40020c00
 8001974:	40021000 	.word	0x40021000
 8001978:	40013c00 	.word	0x40013c00

0800197c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e267      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d075      	beq.n	8001a86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800199a:	4b88      	ldr	r3, [pc, #544]	@ (8001bbc <HAL_RCC_OscConfig+0x240>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 030c 	and.w	r3, r3, #12
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d00c      	beq.n	80019c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a6:	4b85      	ldr	r3, [pc, #532]	@ (8001bbc <HAL_RCC_OscConfig+0x240>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80019ae:	2b08      	cmp	r3, #8
 80019b0:	d112      	bne.n	80019d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019b2:	4b82      	ldr	r3, [pc, #520]	@ (8001bbc <HAL_RCC_OscConfig+0x240>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019be:	d10b      	bne.n	80019d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c0:	4b7e      	ldr	r3, [pc, #504]	@ (8001bbc <HAL_RCC_OscConfig+0x240>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d05b      	beq.n	8001a84 <HAL_RCC_OscConfig+0x108>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d157      	bne.n	8001a84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e242      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019e0:	d106      	bne.n	80019f0 <HAL_RCC_OscConfig+0x74>
 80019e2:	4b76      	ldr	r3, [pc, #472]	@ (8001bbc <HAL_RCC_OscConfig+0x240>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a75      	ldr	r2, [pc, #468]	@ (8001bbc <HAL_RCC_OscConfig+0x240>)
 80019e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	e01d      	b.n	8001a2c <HAL_RCC_OscConfig+0xb0>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019f8:	d10c      	bne.n	8001a14 <HAL_RCC_OscConfig+0x98>
 80019fa:	4b70      	ldr	r3, [pc, #448]	@ (8001bbc <HAL_RCC_OscConfig+0x240>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a6f      	ldr	r2, [pc, #444]	@ (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001a00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	4b6d      	ldr	r3, [pc, #436]	@ (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a6c      	ldr	r2, [pc, #432]	@ (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	e00b      	b.n	8001a2c <HAL_RCC_OscConfig+0xb0>
 8001a14:	4b69      	ldr	r3, [pc, #420]	@ (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a68      	ldr	r2, [pc, #416]	@ (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001a1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	4b66      	ldr	r3, [pc, #408]	@ (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a65      	ldr	r2, [pc, #404]	@ (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001a26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d013      	beq.n	8001a5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7ff f96c 	bl	8000d10 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a3c:	f7ff f968 	bl	8000d10 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b64      	cmp	r3, #100	@ 0x64
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e207      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	4b5b      	ldr	r3, [pc, #364]	@ (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0xc0>
 8001a5a:	e014      	b.n	8001a86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff f958 	bl	8000d10 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a64:	f7ff f954 	bl	8000d10 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b64      	cmp	r3, #100	@ 0x64
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e1f3      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a76:	4b51      	ldr	r3, [pc, #324]	@ (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0xe8>
 8001a82:	e000      	b.n	8001a86 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d063      	beq.n	8001b5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a92:	4b4a      	ldr	r3, [pc, #296]	@ (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 030c 	and.w	r3, r3, #12
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00b      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a9e:	4b47      	ldr	r3, [pc, #284]	@ (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d11c      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aaa:	4b44      	ldr	r3, [pc, #272]	@ (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d116      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab6:	4b41      	ldr	r3, [pc, #260]	@ (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d005      	beq.n	8001ace <HAL_RCC_OscConfig+0x152>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d001      	beq.n	8001ace <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e1c7      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ace:	4b3b      	ldr	r3, [pc, #236]	@ (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	4937      	ldr	r1, [pc, #220]	@ (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae2:	e03a      	b.n	8001b5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d020      	beq.n	8001b2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aec:	4b34      	ldr	r3, [pc, #208]	@ (8001bc0 <HAL_RCC_OscConfig+0x244>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af2:	f7ff f90d 	bl	8000d10 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afa:	f7ff f909 	bl	8000d10 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e1a8      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0f0      	beq.n	8001afa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b18:	4b28      	ldr	r3, [pc, #160]	@ (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	4925      	ldr	r1, [pc, #148]	@ (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	600b      	str	r3, [r1, #0]
 8001b2c:	e015      	b.n	8001b5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b2e:	4b24      	ldr	r3, [pc, #144]	@ (8001bc0 <HAL_RCC_OscConfig+0x244>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7ff f8ec 	bl	8000d10 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3c:	f7ff f8e8 	bl	8000d10 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e187      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d036      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d016      	beq.n	8001b9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b6e:	4b15      	ldr	r3, [pc, #84]	@ (8001bc4 <HAL_RCC_OscConfig+0x248>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b74:	f7ff f8cc 	bl	8000d10 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7c:	f7ff f8c8 	bl	8000d10 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e167      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001b90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCC_OscConfig+0x200>
 8001b9a:	e01b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9c:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <HAL_RCC_OscConfig+0x248>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba2:	f7ff f8b5 	bl	8000d10 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba8:	e00e      	b.n	8001bc8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001baa:	f7ff f8b1 	bl	8000d10 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d907      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e150      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	42470000 	.word	0x42470000
 8001bc4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc8:	4b88      	ldr	r3, [pc, #544]	@ (8001dec <HAL_RCC_OscConfig+0x470>)
 8001bca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ea      	bne.n	8001baa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 8097 	beq.w	8001d10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001be6:	4b81      	ldr	r3, [pc, #516]	@ (8001dec <HAL_RCC_OscConfig+0x470>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10f      	bne.n	8001c12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	4b7d      	ldr	r3, [pc, #500]	@ (8001dec <HAL_RCC_OscConfig+0x470>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfa:	4a7c      	ldr	r2, [pc, #496]	@ (8001dec <HAL_RCC_OscConfig+0x470>)
 8001bfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c02:	4b7a      	ldr	r3, [pc, #488]	@ (8001dec <HAL_RCC_OscConfig+0x470>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c12:	4b77      	ldr	r3, [pc, #476]	@ (8001df0 <HAL_RCC_OscConfig+0x474>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d118      	bne.n	8001c50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c1e:	4b74      	ldr	r3, [pc, #464]	@ (8001df0 <HAL_RCC_OscConfig+0x474>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a73      	ldr	r2, [pc, #460]	@ (8001df0 <HAL_RCC_OscConfig+0x474>)
 8001c24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c2a:	f7ff f871 	bl	8000d10 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c32:	f7ff f86d 	bl	8000d10 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e10c      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c44:	4b6a      	ldr	r3, [pc, #424]	@ (8001df0 <HAL_RCC_OscConfig+0x474>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d106      	bne.n	8001c66 <HAL_RCC_OscConfig+0x2ea>
 8001c58:	4b64      	ldr	r3, [pc, #400]	@ (8001dec <HAL_RCC_OscConfig+0x470>)
 8001c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c5c:	4a63      	ldr	r2, [pc, #396]	@ (8001dec <HAL_RCC_OscConfig+0x470>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c64:	e01c      	b.n	8001ca0 <HAL_RCC_OscConfig+0x324>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	2b05      	cmp	r3, #5
 8001c6c:	d10c      	bne.n	8001c88 <HAL_RCC_OscConfig+0x30c>
 8001c6e:	4b5f      	ldr	r3, [pc, #380]	@ (8001dec <HAL_RCC_OscConfig+0x470>)
 8001c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c72:	4a5e      	ldr	r2, [pc, #376]	@ (8001dec <HAL_RCC_OscConfig+0x470>)
 8001c74:	f043 0304 	orr.w	r3, r3, #4
 8001c78:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c7a:	4b5c      	ldr	r3, [pc, #368]	@ (8001dec <HAL_RCC_OscConfig+0x470>)
 8001c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c7e:	4a5b      	ldr	r2, [pc, #364]	@ (8001dec <HAL_RCC_OscConfig+0x470>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c86:	e00b      	b.n	8001ca0 <HAL_RCC_OscConfig+0x324>
 8001c88:	4b58      	ldr	r3, [pc, #352]	@ (8001dec <HAL_RCC_OscConfig+0x470>)
 8001c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c8c:	4a57      	ldr	r2, [pc, #348]	@ (8001dec <HAL_RCC_OscConfig+0x470>)
 8001c8e:	f023 0301 	bic.w	r3, r3, #1
 8001c92:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c94:	4b55      	ldr	r3, [pc, #340]	@ (8001dec <HAL_RCC_OscConfig+0x470>)
 8001c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c98:	4a54      	ldr	r2, [pc, #336]	@ (8001dec <HAL_RCC_OscConfig+0x470>)
 8001c9a:	f023 0304 	bic.w	r3, r3, #4
 8001c9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d015      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca8:	f7ff f832 	bl	8000d10 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cae:	e00a      	b.n	8001cc6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb0:	f7ff f82e 	bl	8000d10 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e0cb      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc6:	4b49      	ldr	r3, [pc, #292]	@ (8001dec <HAL_RCC_OscConfig+0x470>)
 8001cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0ee      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x334>
 8001cd2:	e014      	b.n	8001cfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd4:	f7ff f81c 	bl	8000d10 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cdc:	f7ff f818 	bl	8000d10 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e0b5      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf2:	4b3e      	ldr	r3, [pc, #248]	@ (8001dec <HAL_RCC_OscConfig+0x470>)
 8001cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1ee      	bne.n	8001cdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cfe:	7dfb      	ldrb	r3, [r7, #23]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d105      	bne.n	8001d10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d04:	4b39      	ldr	r3, [pc, #228]	@ (8001dec <HAL_RCC_OscConfig+0x470>)
 8001d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d08:	4a38      	ldr	r2, [pc, #224]	@ (8001dec <HAL_RCC_OscConfig+0x470>)
 8001d0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80a1 	beq.w	8001e5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d1a:	4b34      	ldr	r3, [pc, #208]	@ (8001dec <HAL_RCC_OscConfig+0x470>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d05c      	beq.n	8001de0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d141      	bne.n	8001db2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2e:	4b31      	ldr	r3, [pc, #196]	@ (8001df4 <HAL_RCC_OscConfig+0x478>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7fe ffec 	bl	8000d10 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3c:	f7fe ffe8 	bl	8000d10 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e087      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4e:	4b27      	ldr	r3, [pc, #156]	@ (8001dec <HAL_RCC_OscConfig+0x470>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69da      	ldr	r2, [r3, #28]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d68:	019b      	lsls	r3, r3, #6
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d70:	085b      	lsrs	r3, r3, #1
 8001d72:	3b01      	subs	r3, #1
 8001d74:	041b      	lsls	r3, r3, #16
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d7c:	061b      	lsls	r3, r3, #24
 8001d7e:	491b      	ldr	r1, [pc, #108]	@ (8001dec <HAL_RCC_OscConfig+0x470>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d84:	4b1b      	ldr	r3, [pc, #108]	@ (8001df4 <HAL_RCC_OscConfig+0x478>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8a:	f7fe ffc1 	bl	8000d10 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d92:	f7fe ffbd 	bl	8000d10 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e05c      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da4:	4b11      	ldr	r3, [pc, #68]	@ (8001dec <HAL_RCC_OscConfig+0x470>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0f0      	beq.n	8001d92 <HAL_RCC_OscConfig+0x416>
 8001db0:	e054      	b.n	8001e5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db2:	4b10      	ldr	r3, [pc, #64]	@ (8001df4 <HAL_RCC_OscConfig+0x478>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7fe ffaa 	bl	8000d10 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7fe ffa6 	bl	8000d10 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e045      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd2:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <HAL_RCC_OscConfig+0x470>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x444>
 8001dde:	e03d      	b.n	8001e5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d107      	bne.n	8001df8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e038      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40007000 	.word	0x40007000
 8001df4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001df8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e68 <HAL_RCC_OscConfig+0x4ec>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d028      	beq.n	8001e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d121      	bne.n	8001e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d11a      	bne.n	8001e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e28:	4013      	ands	r3, r2
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d111      	bne.n	8001e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e3e:	085b      	lsrs	r3, r3, #1
 8001e40:	3b01      	subs	r3, #1
 8001e42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d107      	bne.n	8001e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800

08001e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0cc      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e80:	4b68      	ldr	r3, [pc, #416]	@ (8002024 <HAL_RCC_ClockConfig+0x1b8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d90c      	bls.n	8001ea8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8e:	4b65      	ldr	r3, [pc, #404]	@ (8002024 <HAL_RCC_ClockConfig+0x1b8>)
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e96:	4b63      	ldr	r3, [pc, #396]	@ (8002024 <HAL_RCC_ClockConfig+0x1b8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d001      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e0b8      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d020      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec0:	4b59      	ldr	r3, [pc, #356]	@ (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	4a58      	ldr	r2, [pc, #352]	@ (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001eca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ed8:	4b53      	ldr	r3, [pc, #332]	@ (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	4a52      	ldr	r2, [pc, #328]	@ (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ee2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee4:	4b50      	ldr	r3, [pc, #320]	@ (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	494d      	ldr	r1, [pc, #308]	@ (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d044      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d107      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0a:	4b47      	ldr	r3, [pc, #284]	@ (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d119      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e07f      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d003      	beq.n	8001f2a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2a:	4b3f      	ldr	r3, [pc, #252]	@ (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d109      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e06f      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3a:	4b3b      	ldr	r3, [pc, #236]	@ (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e067      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f4a:	4b37      	ldr	r3, [pc, #220]	@ (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f023 0203 	bic.w	r2, r3, #3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4934      	ldr	r1, [pc, #208]	@ (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f5c:	f7fe fed8 	bl	8000d10 <HAL_GetTick>
 8001f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f62:	e00a      	b.n	8001f7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f64:	f7fe fed4 	bl	8000d10 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e04f      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 020c 	and.w	r2, r3, #12
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d1eb      	bne.n	8001f64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f8c:	4b25      	ldr	r3, [pc, #148]	@ (8002024 <HAL_RCC_ClockConfig+0x1b8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d20c      	bcs.n	8001fb4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9a:	4b22      	ldr	r3, [pc, #136]	@ (8002024 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	4b20      	ldr	r3, [pc, #128]	@ (8002024 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e032      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc0:	4b19      	ldr	r3, [pc, #100]	@ (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	4916      	ldr	r1, [pc, #88]	@ (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d009      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fde:	4b12      	ldr	r3, [pc, #72]	@ (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	490e      	ldr	r1, [pc, #56]	@ (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ff2:	f000 f821 	bl	8002038 <HAL_RCC_GetSysClockFreq>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	091b      	lsrs	r3, r3, #4
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	490a      	ldr	r1, [pc, #40]	@ (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8002004:	5ccb      	ldrb	r3, [r1, r3]
 8002006:	fa22 f303 	lsr.w	r3, r2, r3
 800200a:	4a09      	ldr	r2, [pc, #36]	@ (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800200e:	4b09      	ldr	r3, [pc, #36]	@ (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fe38 	bl	8000c88 <HAL_InitTick>

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023c00 	.word	0x40023c00
 8002028:	40023800 	.word	0x40023800
 800202c:	080038a4 	.word	0x080038a4
 8002030:	20000000 	.word	0x20000000
 8002034:	20000004 	.word	0x20000004

08002038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800203c:	b090      	sub	sp, #64	@ 0x40
 800203e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002050:	4b59      	ldr	r3, [pc, #356]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b08      	cmp	r3, #8
 800205a:	d00d      	beq.n	8002078 <HAL_RCC_GetSysClockFreq+0x40>
 800205c:	2b08      	cmp	r3, #8
 800205e:	f200 80a1 	bhi.w	80021a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0x34>
 8002066:	2b04      	cmp	r3, #4
 8002068:	d003      	beq.n	8002072 <HAL_RCC_GetSysClockFreq+0x3a>
 800206a:	e09b      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800206c:	4b53      	ldr	r3, [pc, #332]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x184>)
 800206e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002070:	e09b      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002072:	4b53      	ldr	r3, [pc, #332]	@ (80021c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002074:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002076:	e098      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002078:	4b4f      	ldr	r3, [pc, #316]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002080:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002082:	4b4d      	ldr	r3, [pc, #308]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d028      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800208e:	4b4a      	ldr	r3, [pc, #296]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	099b      	lsrs	r3, r3, #6
 8002094:	2200      	movs	r2, #0
 8002096:	623b      	str	r3, [r7, #32]
 8002098:	627a      	str	r2, [r7, #36]	@ 0x24
 800209a:	6a3b      	ldr	r3, [r7, #32]
 800209c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020a0:	2100      	movs	r1, #0
 80020a2:	4b47      	ldr	r3, [pc, #284]	@ (80021c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80020a4:	fb03 f201 	mul.w	r2, r3, r1
 80020a8:	2300      	movs	r3, #0
 80020aa:	fb00 f303 	mul.w	r3, r0, r3
 80020ae:	4413      	add	r3, r2
 80020b0:	4a43      	ldr	r2, [pc, #268]	@ (80021c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80020b2:	fba0 1202 	umull	r1, r2, r0, r2
 80020b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80020b8:	460a      	mov	r2, r1
 80020ba:	62ba      	str	r2, [r7, #40]	@ 0x28
 80020bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020be:	4413      	add	r3, r2
 80020c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020c4:	2200      	movs	r2, #0
 80020c6:	61bb      	str	r3, [r7, #24]
 80020c8:	61fa      	str	r2, [r7, #28]
 80020ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80020d2:	f7fe f8dd 	bl	8000290 <__aeabi_uldivmod>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4613      	mov	r3, r2
 80020dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020de:	e053      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e0:	4b35      	ldr	r3, [pc, #212]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	099b      	lsrs	r3, r3, #6
 80020e6:	2200      	movs	r2, #0
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	617a      	str	r2, [r7, #20]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80020f2:	f04f 0b00 	mov.w	fp, #0
 80020f6:	4652      	mov	r2, sl
 80020f8:	465b      	mov	r3, fp
 80020fa:	f04f 0000 	mov.w	r0, #0
 80020fe:	f04f 0100 	mov.w	r1, #0
 8002102:	0159      	lsls	r1, r3, #5
 8002104:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002108:	0150      	lsls	r0, r2, #5
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	ebb2 080a 	subs.w	r8, r2, sl
 8002112:	eb63 090b 	sbc.w	r9, r3, fp
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002122:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002126:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800212a:	ebb2 0408 	subs.w	r4, r2, r8
 800212e:	eb63 0509 	sbc.w	r5, r3, r9
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	00eb      	lsls	r3, r5, #3
 800213c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002140:	00e2      	lsls	r2, r4, #3
 8002142:	4614      	mov	r4, r2
 8002144:	461d      	mov	r5, r3
 8002146:	eb14 030a 	adds.w	r3, r4, sl
 800214a:	603b      	str	r3, [r7, #0]
 800214c:	eb45 030b 	adc.w	r3, r5, fp
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800215e:	4629      	mov	r1, r5
 8002160:	028b      	lsls	r3, r1, #10
 8002162:	4621      	mov	r1, r4
 8002164:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002168:	4621      	mov	r1, r4
 800216a:	028a      	lsls	r2, r1, #10
 800216c:	4610      	mov	r0, r2
 800216e:	4619      	mov	r1, r3
 8002170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002172:	2200      	movs	r2, #0
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	60fa      	str	r2, [r7, #12]
 8002178:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800217c:	f7fe f888 	bl	8000290 <__aeabi_uldivmod>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4613      	mov	r3, r2
 8002186:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002188:	4b0b      	ldr	r3, [pc, #44]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	0c1b      	lsrs	r3, r3, #16
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	3301      	adds	r3, #1
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002198:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800219a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800219c:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021a2:	e002      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021a4:	4b05      	ldr	r3, [pc, #20]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x184>)
 80021a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3740      	adds	r7, #64	@ 0x40
 80021b0:	46bd      	mov	sp, r7
 80021b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021b6:	bf00      	nop
 80021b8:	40023800 	.word	0x40023800
 80021bc:	00f42400 	.word	0x00f42400
 80021c0:	017d7840 	.word	0x017d7840

080021c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c8:	4b03      	ldr	r3, [pc, #12]	@ (80021d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021ca:	681b      	ldr	r3, [r3, #0]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	20000000 	.word	0x20000000

080021dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021e0:	f7ff fff0 	bl	80021c4 <HAL_RCC_GetHCLKFreq>
 80021e4:	4602      	mov	r2, r0
 80021e6:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	0a9b      	lsrs	r3, r3, #10
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	4903      	ldr	r1, [pc, #12]	@ (8002200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021f2:	5ccb      	ldrb	r3, [r1, r3]
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40023800 	.word	0x40023800
 8002200:	080038b4 	.word	0x080038b4

08002204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002208:	f7ff ffdc 	bl	80021c4 <HAL_RCC_GetHCLKFreq>
 800220c:	4602      	mov	r2, r0
 800220e:	4b05      	ldr	r3, [pc, #20]	@ (8002224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	0b5b      	lsrs	r3, r3, #13
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	4903      	ldr	r1, [pc, #12]	@ (8002228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800221a:	5ccb      	ldrb	r3, [r1, r3]
 800221c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002220:	4618      	mov	r0, r3
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40023800 	.word	0x40023800
 8002228:	080038b4 	.word	0x080038b4

0800222c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e042      	b.n	80022c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d106      	bne.n	8002258 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7fe fb9c 	bl	8000990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2224      	movs	r2, #36	@ 0x24
 800225c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800226e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 fb79 	bl	8002968 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002284:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	695a      	ldr	r2, [r3, #20]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002294:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08a      	sub	sp, #40	@ 0x28
 80022d0:	af02      	add	r7, sp, #8
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	603b      	str	r3, [r7, #0]
 80022d8:	4613      	mov	r3, r2
 80022da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b20      	cmp	r3, #32
 80022ea:	d175      	bne.n	80023d8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <HAL_UART_Transmit+0x2c>
 80022f2:	88fb      	ldrh	r3, [r7, #6]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e06e      	b.n	80023da <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2221      	movs	r2, #33	@ 0x21
 8002306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800230a:	f7fe fd01 	bl	8000d10 <HAL_GetTick>
 800230e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	88fa      	ldrh	r2, [r7, #6]
 8002314:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	88fa      	ldrh	r2, [r7, #6]
 800231a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002324:	d108      	bne.n	8002338 <HAL_UART_Transmit+0x6c>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d104      	bne.n	8002338 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	61bb      	str	r3, [r7, #24]
 8002336:	e003      	b.n	8002340 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800233c:	2300      	movs	r3, #0
 800233e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002340:	e02e      	b.n	80023a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2200      	movs	r2, #0
 800234a:	2180      	movs	r1, #128	@ 0x80
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 f98b 	bl	8002668 <UART_WaitOnFlagUntilTimeout>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e03a      	b.n	80023da <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10b      	bne.n	8002382 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002378:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	3302      	adds	r3, #2
 800237e:	61bb      	str	r3, [r7, #24]
 8002380:	e007      	b.n	8002392 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	781a      	ldrb	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	3301      	adds	r3, #1
 8002390:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002396:	b29b      	uxth	r3, r3
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1cb      	bne.n	8002342 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2200      	movs	r2, #0
 80023b2:	2140      	movs	r1, #64	@ 0x40
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 f957 	bl	8002668 <UART_WaitOnFlagUntilTimeout>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2220      	movs	r2, #32
 80023c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e006      	b.n	80023da <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	e000      	b.n	80023da <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80023d8:	2302      	movs	r3, #2
  }
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3720      	adds	r7, #32
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b084      	sub	sp, #16
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	4613      	mov	r3, r2
 80023ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b20      	cmp	r3, #32
 80023fa:	d112      	bne.n	8002422 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <HAL_UART_Receive_DMA+0x26>
 8002402:	88fb      	ldrh	r3, [r7, #6]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e00b      	b.n	8002424 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	461a      	mov	r2, r3
 8002416:	68b9      	ldr	r1, [r7, #8]
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 f97f 	bl	800271c <UART_Start_Receive_DMA>
 800241e:	4603      	mov	r3, r0
 8002420:	e000      	b.n	8002424 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002422:	2302      	movs	r3, #2
  }
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b09c      	sub	sp, #112	@ 0x70
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002478:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002484:	2b00      	cmp	r3, #0
 8002486:	d172      	bne.n	800256e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002488:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800248a:	2200      	movs	r2, #0
 800248c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800248e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	330c      	adds	r3, #12
 8002494:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002496:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002498:	e853 3f00 	ldrex	r3, [r3]
 800249c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800249e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	330c      	adds	r3, #12
 80024ac:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80024ae:	65ba      	str	r2, [r7, #88]	@ 0x58
 80024b0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80024b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80024b6:	e841 2300 	strex	r3, r2, [r1]
 80024ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80024bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1e5      	bne.n	800248e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	3314      	adds	r3, #20
 80024c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024cc:	e853 3f00 	ldrex	r3, [r3]
 80024d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80024d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024d4:	f023 0301 	bic.w	r3, r3, #1
 80024d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80024da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	3314      	adds	r3, #20
 80024e0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80024e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80024e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80024e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80024ea:	e841 2300 	strex	r3, r2, [r1]
 80024ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80024f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1e5      	bne.n	80024c2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3314      	adds	r3, #20
 80024fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002500:	e853 3f00 	ldrex	r3, [r3]
 8002504:	623b      	str	r3, [r7, #32]
   return(result);
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800250c:	663b      	str	r3, [r7, #96]	@ 0x60
 800250e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	3314      	adds	r3, #20
 8002514:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002516:	633a      	str	r2, [r7, #48]	@ 0x30
 8002518:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800251a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800251c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800251e:	e841 2300 	strex	r3, r2, [r1]
 8002522:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1e5      	bne.n	80024f6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800252a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800252c:	2220      	movs	r2, #32
 800252e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002532:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	2b01      	cmp	r3, #1
 8002538:	d119      	bne.n	800256e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800253a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	330c      	adds	r3, #12
 8002540:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	e853 3f00 	ldrex	r3, [r3]
 8002548:	60fb      	str	r3, [r7, #12]
   return(result);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f023 0310 	bic.w	r3, r3, #16
 8002550:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	330c      	adds	r3, #12
 8002558:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800255a:	61fa      	str	r2, [r7, #28]
 800255c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800255e:	69b9      	ldr	r1, [r7, #24]
 8002560:	69fa      	ldr	r2, [r7, #28]
 8002562:	e841 2300 	strex	r3, r2, [r1]
 8002566:	617b      	str	r3, [r7, #20]
   return(result);
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1e5      	bne.n	800253a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800256e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002570:	2200      	movs	r2, #0
 8002572:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002574:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002578:	2b01      	cmp	r3, #1
 800257a:	d106      	bne.n	800258a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800257c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800257e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002580:	4619      	mov	r1, r3
 8002582:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002584:	f7ff ff66 	bl	8002454 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002588:	e002      	b.n	8002590 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800258a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800258c:	f7fe f886 	bl	800069c <HAL_UART_RxCpltCallback>
}
 8002590:	bf00      	nop
 8002592:	3770      	adds	r7, #112	@ 0x70
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2201      	movs	r2, #1
 80025aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d108      	bne.n	80025c6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80025b8:	085b      	lsrs	r3, r3, #1
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	4619      	mov	r1, r3
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f7ff ff48 	bl	8002454 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80025c4:	e002      	b.n	80025cc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f7ff ff30 	bl	800242c <HAL_UART_RxHalfCpltCallback>
}
 80025cc:	bf00      	nop
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025f0:	2b80      	cmp	r3, #128	@ 0x80
 80025f2:	bf0c      	ite	eq
 80025f4:	2301      	moveq	r3, #1
 80025f6:	2300      	movne	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b21      	cmp	r3, #33	@ 0x21
 8002606:	d108      	bne.n	800261a <UART_DMAError+0x46>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d005      	beq.n	800261a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2200      	movs	r2, #0
 8002612:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8002614:	68b8      	ldr	r0, [r7, #8]
 8002616:	f000 f91b 	bl	8002850 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002624:	2b40      	cmp	r3, #64	@ 0x40
 8002626:	bf0c      	ite	eq
 8002628:	2301      	moveq	r3, #1
 800262a:	2300      	movne	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b22      	cmp	r3, #34	@ 0x22
 800263a:	d108      	bne.n	800264e <UART_DMAError+0x7a>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2200      	movs	r2, #0
 8002646:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002648:	68b8      	ldr	r0, [r7, #8]
 800264a:	f000 f929 	bl	80028a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002652:	f043 0210 	orr.w	r2, r3, #16
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800265a:	68b8      	ldr	r0, [r7, #8]
 800265c:	f7ff fef0 	bl	8002440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002660:	bf00      	nop
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	4613      	mov	r3, r2
 8002676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002678:	e03b      	b.n	80026f2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002680:	d037      	beq.n	80026f2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002682:	f7fe fb45 	bl	8000d10 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	6a3a      	ldr	r2, [r7, #32]
 800268e:	429a      	cmp	r2, r3
 8002690:	d302      	bcc.n	8002698 <UART_WaitOnFlagUntilTimeout+0x30>
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e03a      	b.n	8002712 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d023      	beq.n	80026f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b80      	cmp	r3, #128	@ 0x80
 80026ae:	d020      	beq.n	80026f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b40      	cmp	r3, #64	@ 0x40
 80026b4:	d01d      	beq.n	80026f2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d116      	bne.n	80026f2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 f8e0 	bl	80028a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2208      	movs	r2, #8
 80026e4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e00f      	b.n	8002712 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	4013      	ands	r3, r2
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	429a      	cmp	r2, r3
 8002700:	bf0c      	ite	eq
 8002702:	2301      	moveq	r3, #1
 8002704:	2300      	movne	r3, #0
 8002706:	b2db      	uxtb	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	429a      	cmp	r2, r3
 800270e:	d0b4      	beq.n	800267a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b098      	sub	sp, #96	@ 0x60
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	4613      	mov	r3, r2
 8002728:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	88fa      	ldrh	r2, [r7, #6]
 8002734:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2222      	movs	r2, #34	@ 0x22
 8002740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002748:	4a3e      	ldr	r2, [pc, #248]	@ (8002844 <UART_Start_Receive_DMA+0x128>)
 800274a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002750:	4a3d      	ldr	r2, [pc, #244]	@ (8002848 <UART_Start_Receive_DMA+0x12c>)
 8002752:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002758:	4a3c      	ldr	r2, [pc, #240]	@ (800284c <UART_Start_Receive_DMA+0x130>)
 800275a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002760:	2200      	movs	r2, #0
 8002762:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002764:	f107 0308 	add.w	r3, r7, #8
 8002768:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	3304      	adds	r3, #4
 8002774:	4619      	mov	r1, r3
 8002776:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	f7fe fcb8 	bl	80010f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002780:	2300      	movs	r3, #0
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d019      	beq.n	80027d2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	330c      	adds	r3, #12
 80027a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027a8:	e853 3f00 	ldrex	r3, [r3]
 80027ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80027ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	330c      	adds	r3, #12
 80027bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80027be:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80027c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80027c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027c6:	e841 2300 	strex	r3, r2, [r1]
 80027ca:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80027cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1e5      	bne.n	800279e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	3314      	adds	r3, #20
 80027d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027dc:	e853 3f00 	ldrex	r3, [r3]
 80027e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80027e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	3314      	adds	r3, #20
 80027f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80027f2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80027f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80027f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80027fa:	e841 2300 	strex	r3, r2, [r1]
 80027fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1e5      	bne.n	80027d2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	3314      	adds	r3, #20
 800280c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	e853 3f00 	ldrex	r3, [r3]
 8002814:	617b      	str	r3, [r7, #20]
   return(result);
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800281c:	653b      	str	r3, [r7, #80]	@ 0x50
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	3314      	adds	r3, #20
 8002824:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002826:	627a      	str	r2, [r7, #36]	@ 0x24
 8002828:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800282a:	6a39      	ldr	r1, [r7, #32]
 800282c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800282e:	e841 2300 	strex	r3, r2, [r1]
 8002832:	61fb      	str	r3, [r7, #28]
   return(result);
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1e5      	bne.n	8002806 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3760      	adds	r7, #96	@ 0x60
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	0800246d 	.word	0x0800246d
 8002848:	08002599 	.word	0x08002599
 800284c:	080025d5 	.word	0x080025d5

08002850 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	@ 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	330c      	adds	r3, #12
 800285e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	e853 3f00 	ldrex	r3, [r3]
 8002866:	60bb      	str	r3, [r7, #8]
   return(result);
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800286e:	61fb      	str	r3, [r7, #28]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	330c      	adds	r3, #12
 8002876:	69fa      	ldr	r2, [r7, #28]
 8002878:	61ba      	str	r2, [r7, #24]
 800287a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287c:	6979      	ldr	r1, [r7, #20]
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	e841 2300 	strex	r3, r2, [r1]
 8002884:	613b      	str	r3, [r7, #16]
   return(result);
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1e5      	bne.n	8002858 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2220      	movs	r2, #32
 8002890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8002894:	bf00      	nop
 8002896:	3724      	adds	r7, #36	@ 0x24
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b095      	sub	sp, #84	@ 0x54
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	330c      	adds	r3, #12
 80028ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028b2:	e853 3f00 	ldrex	r3, [r3]
 80028b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80028b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	330c      	adds	r3, #12
 80028c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80028ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80028ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028d0:	e841 2300 	strex	r3, r2, [r1]
 80028d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80028d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1e5      	bne.n	80028a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	3314      	adds	r3, #20
 80028e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e4:	6a3b      	ldr	r3, [r7, #32]
 80028e6:	e853 3f00 	ldrex	r3, [r3]
 80028ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f023 0301 	bic.w	r3, r3, #1
 80028f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	3314      	adds	r3, #20
 80028fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002900:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002902:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002904:	e841 2300 	strex	r3, r2, [r1]
 8002908:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800290a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1e5      	bne.n	80028dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002914:	2b01      	cmp	r3, #1
 8002916:	d119      	bne.n	800294c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	330c      	adds	r3, #12
 800291e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	e853 3f00 	ldrex	r3, [r3]
 8002926:	60bb      	str	r3, [r7, #8]
   return(result);
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f023 0310 	bic.w	r3, r3, #16
 800292e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	330c      	adds	r3, #12
 8002936:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002938:	61ba      	str	r2, [r7, #24]
 800293a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293c:	6979      	ldr	r1, [r7, #20]
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	e841 2300 	strex	r3, r2, [r1]
 8002944:	613b      	str	r3, [r7, #16]
   return(result);
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1e5      	bne.n	8002918 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800295a:	bf00      	nop
 800295c:	3754      	adds	r7, #84	@ 0x54
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
	...

08002968 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800296c:	b0c0      	sub	sp, #256	@ 0x100
 800296e:	af00      	add	r7, sp, #0
 8002970:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002984:	68d9      	ldr	r1, [r3, #12]
 8002986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	ea40 0301 	orr.w	r3, r0, r1
 8002990:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	431a      	orrs	r2, r3
 80029a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80029c0:	f021 010c 	bic.w	r1, r1, #12
 80029c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80029ce:	430b      	orrs	r3, r1
 80029d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80029de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e2:	6999      	ldr	r1, [r3, #24]
 80029e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	ea40 0301 	orr.w	r3, r0, r1
 80029ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	4b8f      	ldr	r3, [pc, #572]	@ (8002c34 <UART_SetConfig+0x2cc>)
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d005      	beq.n	8002a08 <UART_SetConfig+0xa0>
 80029fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4b8d      	ldr	r3, [pc, #564]	@ (8002c38 <UART_SetConfig+0x2d0>)
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d104      	bne.n	8002a12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a08:	f7ff fbfc 	bl	8002204 <HAL_RCC_GetPCLK2Freq>
 8002a0c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002a10:	e003      	b.n	8002a1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a12:	f7ff fbe3 	bl	80021dc <HAL_RCC_GetPCLK1Freq>
 8002a16:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a24:	f040 810c 	bne.w	8002c40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a32:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002a36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002a3a:	4622      	mov	r2, r4
 8002a3c:	462b      	mov	r3, r5
 8002a3e:	1891      	adds	r1, r2, r2
 8002a40:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002a42:	415b      	adcs	r3, r3
 8002a44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	eb12 0801 	adds.w	r8, r2, r1
 8002a50:	4629      	mov	r1, r5
 8002a52:	eb43 0901 	adc.w	r9, r3, r1
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a6a:	4690      	mov	r8, r2
 8002a6c:	4699      	mov	r9, r3
 8002a6e:	4623      	mov	r3, r4
 8002a70:	eb18 0303 	adds.w	r3, r8, r3
 8002a74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a78:	462b      	mov	r3, r5
 8002a7a:	eb49 0303 	adc.w	r3, r9, r3
 8002a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a8e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002a92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a96:	460b      	mov	r3, r1
 8002a98:	18db      	adds	r3, r3, r3
 8002a9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	eb42 0303 	adc.w	r3, r2, r3
 8002aa2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002aa4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002aa8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002aac:	f7fd fbf0 	bl	8000290 <__aeabi_uldivmod>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4b61      	ldr	r3, [pc, #388]	@ (8002c3c <UART_SetConfig+0x2d4>)
 8002ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8002aba:	095b      	lsrs	r3, r3, #5
 8002abc:	011c      	lsls	r4, r3, #4
 8002abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ac8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002acc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002ad0:	4642      	mov	r2, r8
 8002ad2:	464b      	mov	r3, r9
 8002ad4:	1891      	adds	r1, r2, r2
 8002ad6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ad8:	415b      	adcs	r3, r3
 8002ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002adc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ae0:	4641      	mov	r1, r8
 8002ae2:	eb12 0a01 	adds.w	sl, r2, r1
 8002ae6:	4649      	mov	r1, r9
 8002ae8:	eb43 0b01 	adc.w	fp, r3, r1
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002af8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002afc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b00:	4692      	mov	sl, r2
 8002b02:	469b      	mov	fp, r3
 8002b04:	4643      	mov	r3, r8
 8002b06:	eb1a 0303 	adds.w	r3, sl, r3
 8002b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b0e:	464b      	mov	r3, r9
 8002b10:	eb4b 0303 	adc.w	r3, fp, r3
 8002b14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b24:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002b28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	18db      	adds	r3, r3, r3
 8002b30:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b32:	4613      	mov	r3, r2
 8002b34:	eb42 0303 	adc.w	r3, r2, r3
 8002b38:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002b42:	f7fd fba5 	bl	8000290 <__aeabi_uldivmod>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4b3b      	ldr	r3, [pc, #236]	@ (8002c3c <UART_SetConfig+0x2d4>)
 8002b4e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	2264      	movs	r2, #100	@ 0x64
 8002b56:	fb02 f303 	mul.w	r3, r2, r3
 8002b5a:	1acb      	subs	r3, r1, r3
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002b62:	4b36      	ldr	r3, [pc, #216]	@ (8002c3c <UART_SetConfig+0x2d4>)
 8002b64:	fba3 2302 	umull	r2, r3, r3, r2
 8002b68:	095b      	lsrs	r3, r3, #5
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002b70:	441c      	add	r4, r3
 8002b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b76:	2200      	movs	r2, #0
 8002b78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b7c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002b80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002b84:	4642      	mov	r2, r8
 8002b86:	464b      	mov	r3, r9
 8002b88:	1891      	adds	r1, r2, r2
 8002b8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b8c:	415b      	adcs	r3, r3
 8002b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b94:	4641      	mov	r1, r8
 8002b96:	1851      	adds	r1, r2, r1
 8002b98:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b9a:	4649      	mov	r1, r9
 8002b9c:	414b      	adcs	r3, r1
 8002b9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002bac:	4659      	mov	r1, fp
 8002bae:	00cb      	lsls	r3, r1, #3
 8002bb0:	4651      	mov	r1, sl
 8002bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bb6:	4651      	mov	r1, sl
 8002bb8:	00ca      	lsls	r2, r1, #3
 8002bba:	4610      	mov	r0, r2
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4642      	mov	r2, r8
 8002bc2:	189b      	adds	r3, r3, r2
 8002bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002bc8:	464b      	mov	r3, r9
 8002bca:	460a      	mov	r2, r1
 8002bcc:	eb42 0303 	adc.w	r3, r2, r3
 8002bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002be0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002be4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002be8:	460b      	mov	r3, r1
 8002bea:	18db      	adds	r3, r3, r3
 8002bec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bee:	4613      	mov	r3, r2
 8002bf0:	eb42 0303 	adc.w	r3, r2, r3
 8002bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002bfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002bfe:	f7fd fb47 	bl	8000290 <__aeabi_uldivmod>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4b0d      	ldr	r3, [pc, #52]	@ (8002c3c <UART_SetConfig+0x2d4>)
 8002c08:	fba3 1302 	umull	r1, r3, r3, r2
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	2164      	movs	r1, #100	@ 0x64
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	3332      	adds	r3, #50	@ 0x32
 8002c1a:	4a08      	ldr	r2, [pc, #32]	@ (8002c3c <UART_SetConfig+0x2d4>)
 8002c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c20:	095b      	lsrs	r3, r3, #5
 8002c22:	f003 0207 	and.w	r2, r3, #7
 8002c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4422      	add	r2, r4
 8002c2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c30:	e106      	b.n	8002e40 <UART_SetConfig+0x4d8>
 8002c32:	bf00      	nop
 8002c34:	40011000 	.word	0x40011000
 8002c38:	40011400 	.word	0x40011400
 8002c3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c44:	2200      	movs	r2, #0
 8002c46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c4a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002c4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002c52:	4642      	mov	r2, r8
 8002c54:	464b      	mov	r3, r9
 8002c56:	1891      	adds	r1, r2, r2
 8002c58:	6239      	str	r1, [r7, #32]
 8002c5a:	415b      	adcs	r3, r3
 8002c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c62:	4641      	mov	r1, r8
 8002c64:	1854      	adds	r4, r2, r1
 8002c66:	4649      	mov	r1, r9
 8002c68:	eb43 0501 	adc.w	r5, r3, r1
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	00eb      	lsls	r3, r5, #3
 8002c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c7a:	00e2      	lsls	r2, r4, #3
 8002c7c:	4614      	mov	r4, r2
 8002c7e:	461d      	mov	r5, r3
 8002c80:	4643      	mov	r3, r8
 8002c82:	18e3      	adds	r3, r4, r3
 8002c84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c88:	464b      	mov	r3, r9
 8002c8a:	eb45 0303 	adc.w	r3, r5, r3
 8002c8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002cae:	4629      	mov	r1, r5
 8002cb0:	008b      	lsls	r3, r1, #2
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cb8:	4621      	mov	r1, r4
 8002cba:	008a      	lsls	r2, r1, #2
 8002cbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002cc0:	f7fd fae6 	bl	8000290 <__aeabi_uldivmod>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4b60      	ldr	r3, [pc, #384]	@ (8002e4c <UART_SetConfig+0x4e4>)
 8002cca:	fba3 2302 	umull	r2, r3, r3, r2
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	011c      	lsls	r4, r3, #4
 8002cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002cdc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002ce0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002ce4:	4642      	mov	r2, r8
 8002ce6:	464b      	mov	r3, r9
 8002ce8:	1891      	adds	r1, r2, r2
 8002cea:	61b9      	str	r1, [r7, #24]
 8002cec:	415b      	adcs	r3, r3
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cf4:	4641      	mov	r1, r8
 8002cf6:	1851      	adds	r1, r2, r1
 8002cf8:	6139      	str	r1, [r7, #16]
 8002cfa:	4649      	mov	r1, r9
 8002cfc:	414b      	adcs	r3, r1
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d0c:	4659      	mov	r1, fp
 8002d0e:	00cb      	lsls	r3, r1, #3
 8002d10:	4651      	mov	r1, sl
 8002d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d16:	4651      	mov	r1, sl
 8002d18:	00ca      	lsls	r2, r1, #3
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4642      	mov	r2, r8
 8002d22:	189b      	adds	r3, r3, r2
 8002d24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d28:	464b      	mov	r3, r9
 8002d2a:	460a      	mov	r2, r1
 8002d2c:	eb42 0303 	adc.w	r3, r2, r3
 8002d30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d3e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002d4c:	4649      	mov	r1, r9
 8002d4e:	008b      	lsls	r3, r1, #2
 8002d50:	4641      	mov	r1, r8
 8002d52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d56:	4641      	mov	r1, r8
 8002d58:	008a      	lsls	r2, r1, #2
 8002d5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d5e:	f7fd fa97 	bl	8000290 <__aeabi_uldivmod>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4611      	mov	r1, r2
 8002d68:	4b38      	ldr	r3, [pc, #224]	@ (8002e4c <UART_SetConfig+0x4e4>)
 8002d6a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	2264      	movs	r2, #100	@ 0x64
 8002d72:	fb02 f303 	mul.w	r3, r2, r3
 8002d76:	1acb      	subs	r3, r1, r3
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	3332      	adds	r3, #50	@ 0x32
 8002d7c:	4a33      	ldr	r2, [pc, #204]	@ (8002e4c <UART_SetConfig+0x4e4>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d88:	441c      	add	r4, r3
 8002d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d8e:	2200      	movs	r2, #0
 8002d90:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d92:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002d98:	4642      	mov	r2, r8
 8002d9a:	464b      	mov	r3, r9
 8002d9c:	1891      	adds	r1, r2, r2
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	415b      	adcs	r3, r3
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002da8:	4641      	mov	r1, r8
 8002daa:	1851      	adds	r1, r2, r1
 8002dac:	6039      	str	r1, [r7, #0]
 8002dae:	4649      	mov	r1, r9
 8002db0:	414b      	adcs	r3, r1
 8002db2:	607b      	str	r3, [r7, #4]
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002dc0:	4659      	mov	r1, fp
 8002dc2:	00cb      	lsls	r3, r1, #3
 8002dc4:	4651      	mov	r1, sl
 8002dc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dca:	4651      	mov	r1, sl
 8002dcc:	00ca      	lsls	r2, r1, #3
 8002dce:	4610      	mov	r0, r2
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	4642      	mov	r2, r8
 8002dd6:	189b      	adds	r3, r3, r2
 8002dd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002dda:	464b      	mov	r3, r9
 8002ddc:	460a      	mov	r2, r1
 8002dde:	eb42 0303 	adc.w	r3, r2, r3
 8002de2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	663b      	str	r3, [r7, #96]	@ 0x60
 8002dee:	667a      	str	r2, [r7, #100]	@ 0x64
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002dfc:	4649      	mov	r1, r9
 8002dfe:	008b      	lsls	r3, r1, #2
 8002e00:	4641      	mov	r1, r8
 8002e02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e06:	4641      	mov	r1, r8
 8002e08:	008a      	lsls	r2, r1, #2
 8002e0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002e0e:	f7fd fa3f 	bl	8000290 <__aeabi_uldivmod>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4b0d      	ldr	r3, [pc, #52]	@ (8002e4c <UART_SetConfig+0x4e4>)
 8002e18:	fba3 1302 	umull	r1, r3, r3, r2
 8002e1c:	095b      	lsrs	r3, r3, #5
 8002e1e:	2164      	movs	r1, #100	@ 0x64
 8002e20:	fb01 f303 	mul.w	r3, r1, r3
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	3332      	adds	r3, #50	@ 0x32
 8002e2a:	4a08      	ldr	r2, [pc, #32]	@ (8002e4c <UART_SetConfig+0x4e4>)
 8002e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e30:	095b      	lsrs	r3, r3, #5
 8002e32:	f003 020f 	and.w	r2, r3, #15
 8002e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4422      	add	r2, r4
 8002e3e:	609a      	str	r2, [r3, #8]
}
 8002e40:	bf00      	nop
 8002e42:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002e46:	46bd      	mov	sp, r7
 8002e48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e4c:	51eb851f 	.word	0x51eb851f

08002e50 <siprintf>:
 8002e50:	b40e      	push	{r1, r2, r3}
 8002e52:	b500      	push	{lr}
 8002e54:	b09c      	sub	sp, #112	@ 0x70
 8002e56:	ab1d      	add	r3, sp, #116	@ 0x74
 8002e58:	9002      	str	r0, [sp, #8]
 8002e5a:	9006      	str	r0, [sp, #24]
 8002e5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002e60:	4809      	ldr	r0, [pc, #36]	@ (8002e88 <siprintf+0x38>)
 8002e62:	9107      	str	r1, [sp, #28]
 8002e64:	9104      	str	r1, [sp, #16]
 8002e66:	4909      	ldr	r1, [pc, #36]	@ (8002e8c <siprintf+0x3c>)
 8002e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e6c:	9105      	str	r1, [sp, #20]
 8002e6e:	6800      	ldr	r0, [r0, #0]
 8002e70:	9301      	str	r3, [sp, #4]
 8002e72:	a902      	add	r1, sp, #8
 8002e74:	f000 fa0e 	bl	8003294 <_svfiprintf_r>
 8002e78:	9b02      	ldr	r3, [sp, #8]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	701a      	strb	r2, [r3, #0]
 8002e7e:	b01c      	add	sp, #112	@ 0x70
 8002e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e84:	b003      	add	sp, #12
 8002e86:	4770      	bx	lr
 8002e88:	2000000c 	.word	0x2000000c
 8002e8c:	ffff0208 	.word	0xffff0208

08002e90 <memset>:
 8002e90:	4402      	add	r2, r0
 8002e92:	4603      	mov	r3, r0
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d100      	bne.n	8002e9a <memset+0xa>
 8002e98:	4770      	bx	lr
 8002e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e9e:	e7f9      	b.n	8002e94 <memset+0x4>

08002ea0 <strchr>:
 8002ea0:	b2c9      	uxtb	r1, r1
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002eaa:	b112      	cbz	r2, 8002eb2 <strchr+0x12>
 8002eac:	428a      	cmp	r2, r1
 8002eae:	d1f9      	bne.n	8002ea4 <strchr+0x4>
 8002eb0:	4770      	bx	lr
 8002eb2:	2900      	cmp	r1, #0
 8002eb4:	bf18      	it	ne
 8002eb6:	2000      	movne	r0, #0
 8002eb8:	4770      	bx	lr
	...

08002ebc <strdup>:
 8002ebc:	4b02      	ldr	r3, [pc, #8]	@ (8002ec8 <strdup+0xc>)
 8002ebe:	4601      	mov	r1, r0
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	f000 b803 	b.w	8002ecc <_strdup_r>
 8002ec6:	bf00      	nop
 8002ec8:	2000000c 	.word	0x2000000c

08002ecc <_strdup_r>:
 8002ecc:	b570      	push	{r4, r5, r6, lr}
 8002ece:	4604      	mov	r4, r0
 8002ed0:	4608      	mov	r0, r1
 8002ed2:	460d      	mov	r5, r1
 8002ed4:	f7fd f984 	bl	80001e0 <strlen>
 8002ed8:	1c46      	adds	r6, r0, #1
 8002eda:	4631      	mov	r1, r6
 8002edc:	4620      	mov	r0, r4
 8002ede:	f000 f8f1 	bl	80030c4 <_malloc_r>
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	b118      	cbz	r0, 8002eee <_strdup_r+0x22>
 8002ee6:	4632      	mov	r2, r6
 8002ee8:	4629      	mov	r1, r5
 8002eea:	f000 f871 	bl	8002fd0 <memcpy>
 8002eee:	4620      	mov	r0, r4
 8002ef0:	bd70      	pop	{r4, r5, r6, pc}

08002ef2 <strsep>:
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	6800      	ldr	r0, [r0, #0]
 8002ef8:	f000 b800 	b.w	8002efc <__strtok_r>

08002efc <__strtok_r>:
 8002efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002efe:	4604      	mov	r4, r0
 8002f00:	b908      	cbnz	r0, 8002f06 <__strtok_r+0xa>
 8002f02:	6814      	ldr	r4, [r2, #0]
 8002f04:	b144      	cbz	r4, 8002f18 <__strtok_r+0x1c>
 8002f06:	4620      	mov	r0, r4
 8002f08:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002f0c:	460f      	mov	r7, r1
 8002f0e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8002f12:	b91e      	cbnz	r6, 8002f1c <__strtok_r+0x20>
 8002f14:	b965      	cbnz	r5, 8002f30 <__strtok_r+0x34>
 8002f16:	6015      	str	r5, [r2, #0]
 8002f18:	2000      	movs	r0, #0
 8002f1a:	e005      	b.n	8002f28 <__strtok_r+0x2c>
 8002f1c:	42b5      	cmp	r5, r6
 8002f1e:	d1f6      	bne.n	8002f0e <__strtok_r+0x12>
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1f0      	bne.n	8002f06 <__strtok_r+0xa>
 8002f24:	6014      	str	r4, [r2, #0]
 8002f26:	7003      	strb	r3, [r0, #0]
 8002f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f2a:	461c      	mov	r4, r3
 8002f2c:	e00c      	b.n	8002f48 <__strtok_r+0x4c>
 8002f2e:	b915      	cbnz	r5, 8002f36 <__strtok_r+0x3a>
 8002f30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002f34:	460e      	mov	r6, r1
 8002f36:	f816 5b01 	ldrb.w	r5, [r6], #1
 8002f3a:	42ab      	cmp	r3, r5
 8002f3c:	d1f7      	bne.n	8002f2e <__strtok_r+0x32>
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f3      	beq.n	8002f2a <__strtok_r+0x2e>
 8002f42:	2300      	movs	r3, #0
 8002f44:	f804 3c01 	strb.w	r3, [r4, #-1]
 8002f48:	6014      	str	r4, [r2, #0]
 8002f4a:	e7ed      	b.n	8002f28 <__strtok_r+0x2c>

08002f4c <strstr>:
 8002f4c:	780a      	ldrb	r2, [r1, #0]
 8002f4e:	b570      	push	{r4, r5, r6, lr}
 8002f50:	b96a      	cbnz	r2, 8002f6e <strstr+0x22>
 8002f52:	bd70      	pop	{r4, r5, r6, pc}
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d109      	bne.n	8002f6c <strstr+0x20>
 8002f58:	460c      	mov	r4, r1
 8002f5a:	4605      	mov	r5, r0
 8002f5c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0f6      	beq.n	8002f52 <strstr+0x6>
 8002f64:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002f68:	429e      	cmp	r6, r3
 8002f6a:	d0f7      	beq.n	8002f5c <strstr+0x10>
 8002f6c:	3001      	adds	r0, #1
 8002f6e:	7803      	ldrb	r3, [r0, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1ef      	bne.n	8002f54 <strstr+0x8>
 8002f74:	4618      	mov	r0, r3
 8002f76:	e7ec      	b.n	8002f52 <strstr+0x6>

08002f78 <__errno>:
 8002f78:	4b01      	ldr	r3, [pc, #4]	@ (8002f80 <__errno+0x8>)
 8002f7a:	6818      	ldr	r0, [r3, #0]
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	2000000c 	.word	0x2000000c

08002f84 <__libc_init_array>:
 8002f84:	b570      	push	{r4, r5, r6, lr}
 8002f86:	4d0d      	ldr	r5, [pc, #52]	@ (8002fbc <__libc_init_array+0x38>)
 8002f88:	4c0d      	ldr	r4, [pc, #52]	@ (8002fc0 <__libc_init_array+0x3c>)
 8002f8a:	1b64      	subs	r4, r4, r5
 8002f8c:	10a4      	asrs	r4, r4, #2
 8002f8e:	2600      	movs	r6, #0
 8002f90:	42a6      	cmp	r6, r4
 8002f92:	d109      	bne.n	8002fa8 <__libc_init_array+0x24>
 8002f94:	4d0b      	ldr	r5, [pc, #44]	@ (8002fc4 <__libc_init_array+0x40>)
 8002f96:	4c0c      	ldr	r4, [pc, #48]	@ (8002fc8 <__libc_init_array+0x44>)
 8002f98:	f000 fc66 	bl	8003868 <_init>
 8002f9c:	1b64      	subs	r4, r4, r5
 8002f9e:	10a4      	asrs	r4, r4, #2
 8002fa0:	2600      	movs	r6, #0
 8002fa2:	42a6      	cmp	r6, r4
 8002fa4:	d105      	bne.n	8002fb2 <__libc_init_array+0x2e>
 8002fa6:	bd70      	pop	{r4, r5, r6, pc}
 8002fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fac:	4798      	blx	r3
 8002fae:	3601      	adds	r6, #1
 8002fb0:	e7ee      	b.n	8002f90 <__libc_init_array+0xc>
 8002fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fb6:	4798      	blx	r3
 8002fb8:	3601      	adds	r6, #1
 8002fba:	e7f2      	b.n	8002fa2 <__libc_init_array+0x1e>
 8002fbc:	08003900 	.word	0x08003900
 8002fc0:	08003900 	.word	0x08003900
 8002fc4:	08003900 	.word	0x08003900
 8002fc8:	08003904 	.word	0x08003904

08002fcc <__retarget_lock_acquire_recursive>:
 8002fcc:	4770      	bx	lr

08002fce <__retarget_lock_release_recursive>:
 8002fce:	4770      	bx	lr

08002fd0 <memcpy>:
 8002fd0:	440a      	add	r2, r1
 8002fd2:	4291      	cmp	r1, r2
 8002fd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8002fd8:	d100      	bne.n	8002fdc <memcpy+0xc>
 8002fda:	4770      	bx	lr
 8002fdc:	b510      	push	{r4, lr}
 8002fde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fe2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fe6:	4291      	cmp	r1, r2
 8002fe8:	d1f9      	bne.n	8002fde <memcpy+0xe>
 8002fea:	bd10      	pop	{r4, pc}

08002fec <_free_r>:
 8002fec:	b538      	push	{r3, r4, r5, lr}
 8002fee:	4605      	mov	r5, r0
 8002ff0:	2900      	cmp	r1, #0
 8002ff2:	d041      	beq.n	8003078 <_free_r+0x8c>
 8002ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ff8:	1f0c      	subs	r4, r1, #4
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	bfb8      	it	lt
 8002ffe:	18e4      	addlt	r4, r4, r3
 8003000:	f000 f8e0 	bl	80031c4 <__malloc_lock>
 8003004:	4a1d      	ldr	r2, [pc, #116]	@ (800307c <_free_r+0x90>)
 8003006:	6813      	ldr	r3, [r2, #0]
 8003008:	b933      	cbnz	r3, 8003018 <_free_r+0x2c>
 800300a:	6063      	str	r3, [r4, #4]
 800300c:	6014      	str	r4, [r2, #0]
 800300e:	4628      	mov	r0, r5
 8003010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003014:	f000 b8dc 	b.w	80031d0 <__malloc_unlock>
 8003018:	42a3      	cmp	r3, r4
 800301a:	d908      	bls.n	800302e <_free_r+0x42>
 800301c:	6820      	ldr	r0, [r4, #0]
 800301e:	1821      	adds	r1, r4, r0
 8003020:	428b      	cmp	r3, r1
 8003022:	bf01      	itttt	eq
 8003024:	6819      	ldreq	r1, [r3, #0]
 8003026:	685b      	ldreq	r3, [r3, #4]
 8003028:	1809      	addeq	r1, r1, r0
 800302a:	6021      	streq	r1, [r4, #0]
 800302c:	e7ed      	b.n	800300a <_free_r+0x1e>
 800302e:	461a      	mov	r2, r3
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	b10b      	cbz	r3, 8003038 <_free_r+0x4c>
 8003034:	42a3      	cmp	r3, r4
 8003036:	d9fa      	bls.n	800302e <_free_r+0x42>
 8003038:	6811      	ldr	r1, [r2, #0]
 800303a:	1850      	adds	r0, r2, r1
 800303c:	42a0      	cmp	r0, r4
 800303e:	d10b      	bne.n	8003058 <_free_r+0x6c>
 8003040:	6820      	ldr	r0, [r4, #0]
 8003042:	4401      	add	r1, r0
 8003044:	1850      	adds	r0, r2, r1
 8003046:	4283      	cmp	r3, r0
 8003048:	6011      	str	r1, [r2, #0]
 800304a:	d1e0      	bne.n	800300e <_free_r+0x22>
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	6053      	str	r3, [r2, #4]
 8003052:	4408      	add	r0, r1
 8003054:	6010      	str	r0, [r2, #0]
 8003056:	e7da      	b.n	800300e <_free_r+0x22>
 8003058:	d902      	bls.n	8003060 <_free_r+0x74>
 800305a:	230c      	movs	r3, #12
 800305c:	602b      	str	r3, [r5, #0]
 800305e:	e7d6      	b.n	800300e <_free_r+0x22>
 8003060:	6820      	ldr	r0, [r4, #0]
 8003062:	1821      	adds	r1, r4, r0
 8003064:	428b      	cmp	r3, r1
 8003066:	bf04      	itt	eq
 8003068:	6819      	ldreq	r1, [r3, #0]
 800306a:	685b      	ldreq	r3, [r3, #4]
 800306c:	6063      	str	r3, [r4, #4]
 800306e:	bf04      	itt	eq
 8003070:	1809      	addeq	r1, r1, r0
 8003072:	6021      	streq	r1, [r4, #0]
 8003074:	6054      	str	r4, [r2, #4]
 8003076:	e7ca      	b.n	800300e <_free_r+0x22>
 8003078:	bd38      	pop	{r3, r4, r5, pc}
 800307a:	bf00      	nop
 800307c:	20000514 	.word	0x20000514

08003080 <sbrk_aligned>:
 8003080:	b570      	push	{r4, r5, r6, lr}
 8003082:	4e0f      	ldr	r6, [pc, #60]	@ (80030c0 <sbrk_aligned+0x40>)
 8003084:	460c      	mov	r4, r1
 8003086:	6831      	ldr	r1, [r6, #0]
 8003088:	4605      	mov	r5, r0
 800308a:	b911      	cbnz	r1, 8003092 <sbrk_aligned+0x12>
 800308c:	f000 fba6 	bl	80037dc <_sbrk_r>
 8003090:	6030      	str	r0, [r6, #0]
 8003092:	4621      	mov	r1, r4
 8003094:	4628      	mov	r0, r5
 8003096:	f000 fba1 	bl	80037dc <_sbrk_r>
 800309a:	1c43      	adds	r3, r0, #1
 800309c:	d103      	bne.n	80030a6 <sbrk_aligned+0x26>
 800309e:	f04f 34ff 	mov.w	r4, #4294967295
 80030a2:	4620      	mov	r0, r4
 80030a4:	bd70      	pop	{r4, r5, r6, pc}
 80030a6:	1cc4      	adds	r4, r0, #3
 80030a8:	f024 0403 	bic.w	r4, r4, #3
 80030ac:	42a0      	cmp	r0, r4
 80030ae:	d0f8      	beq.n	80030a2 <sbrk_aligned+0x22>
 80030b0:	1a21      	subs	r1, r4, r0
 80030b2:	4628      	mov	r0, r5
 80030b4:	f000 fb92 	bl	80037dc <_sbrk_r>
 80030b8:	3001      	adds	r0, #1
 80030ba:	d1f2      	bne.n	80030a2 <sbrk_aligned+0x22>
 80030bc:	e7ef      	b.n	800309e <sbrk_aligned+0x1e>
 80030be:	bf00      	nop
 80030c0:	20000510 	.word	0x20000510

080030c4 <_malloc_r>:
 80030c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030c8:	1ccd      	adds	r5, r1, #3
 80030ca:	f025 0503 	bic.w	r5, r5, #3
 80030ce:	3508      	adds	r5, #8
 80030d0:	2d0c      	cmp	r5, #12
 80030d2:	bf38      	it	cc
 80030d4:	250c      	movcc	r5, #12
 80030d6:	2d00      	cmp	r5, #0
 80030d8:	4606      	mov	r6, r0
 80030da:	db01      	blt.n	80030e0 <_malloc_r+0x1c>
 80030dc:	42a9      	cmp	r1, r5
 80030de:	d904      	bls.n	80030ea <_malloc_r+0x26>
 80030e0:	230c      	movs	r3, #12
 80030e2:	6033      	str	r3, [r6, #0]
 80030e4:	2000      	movs	r0, #0
 80030e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80031c0 <_malloc_r+0xfc>
 80030ee:	f000 f869 	bl	80031c4 <__malloc_lock>
 80030f2:	f8d8 3000 	ldr.w	r3, [r8]
 80030f6:	461c      	mov	r4, r3
 80030f8:	bb44      	cbnz	r4, 800314c <_malloc_r+0x88>
 80030fa:	4629      	mov	r1, r5
 80030fc:	4630      	mov	r0, r6
 80030fe:	f7ff ffbf 	bl	8003080 <sbrk_aligned>
 8003102:	1c43      	adds	r3, r0, #1
 8003104:	4604      	mov	r4, r0
 8003106:	d158      	bne.n	80031ba <_malloc_r+0xf6>
 8003108:	f8d8 4000 	ldr.w	r4, [r8]
 800310c:	4627      	mov	r7, r4
 800310e:	2f00      	cmp	r7, #0
 8003110:	d143      	bne.n	800319a <_malloc_r+0xd6>
 8003112:	2c00      	cmp	r4, #0
 8003114:	d04b      	beq.n	80031ae <_malloc_r+0xea>
 8003116:	6823      	ldr	r3, [r4, #0]
 8003118:	4639      	mov	r1, r7
 800311a:	4630      	mov	r0, r6
 800311c:	eb04 0903 	add.w	r9, r4, r3
 8003120:	f000 fb5c 	bl	80037dc <_sbrk_r>
 8003124:	4581      	cmp	r9, r0
 8003126:	d142      	bne.n	80031ae <_malloc_r+0xea>
 8003128:	6821      	ldr	r1, [r4, #0]
 800312a:	1a6d      	subs	r5, r5, r1
 800312c:	4629      	mov	r1, r5
 800312e:	4630      	mov	r0, r6
 8003130:	f7ff ffa6 	bl	8003080 <sbrk_aligned>
 8003134:	3001      	adds	r0, #1
 8003136:	d03a      	beq.n	80031ae <_malloc_r+0xea>
 8003138:	6823      	ldr	r3, [r4, #0]
 800313a:	442b      	add	r3, r5
 800313c:	6023      	str	r3, [r4, #0]
 800313e:	f8d8 3000 	ldr.w	r3, [r8]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	bb62      	cbnz	r2, 80031a0 <_malloc_r+0xdc>
 8003146:	f8c8 7000 	str.w	r7, [r8]
 800314a:	e00f      	b.n	800316c <_malloc_r+0xa8>
 800314c:	6822      	ldr	r2, [r4, #0]
 800314e:	1b52      	subs	r2, r2, r5
 8003150:	d420      	bmi.n	8003194 <_malloc_r+0xd0>
 8003152:	2a0b      	cmp	r2, #11
 8003154:	d917      	bls.n	8003186 <_malloc_r+0xc2>
 8003156:	1961      	adds	r1, r4, r5
 8003158:	42a3      	cmp	r3, r4
 800315a:	6025      	str	r5, [r4, #0]
 800315c:	bf18      	it	ne
 800315e:	6059      	strne	r1, [r3, #4]
 8003160:	6863      	ldr	r3, [r4, #4]
 8003162:	bf08      	it	eq
 8003164:	f8c8 1000 	streq.w	r1, [r8]
 8003168:	5162      	str	r2, [r4, r5]
 800316a:	604b      	str	r3, [r1, #4]
 800316c:	4630      	mov	r0, r6
 800316e:	f000 f82f 	bl	80031d0 <__malloc_unlock>
 8003172:	f104 000b 	add.w	r0, r4, #11
 8003176:	1d23      	adds	r3, r4, #4
 8003178:	f020 0007 	bic.w	r0, r0, #7
 800317c:	1ac2      	subs	r2, r0, r3
 800317e:	bf1c      	itt	ne
 8003180:	1a1b      	subne	r3, r3, r0
 8003182:	50a3      	strne	r3, [r4, r2]
 8003184:	e7af      	b.n	80030e6 <_malloc_r+0x22>
 8003186:	6862      	ldr	r2, [r4, #4]
 8003188:	42a3      	cmp	r3, r4
 800318a:	bf0c      	ite	eq
 800318c:	f8c8 2000 	streq.w	r2, [r8]
 8003190:	605a      	strne	r2, [r3, #4]
 8003192:	e7eb      	b.n	800316c <_malloc_r+0xa8>
 8003194:	4623      	mov	r3, r4
 8003196:	6864      	ldr	r4, [r4, #4]
 8003198:	e7ae      	b.n	80030f8 <_malloc_r+0x34>
 800319a:	463c      	mov	r4, r7
 800319c:	687f      	ldr	r7, [r7, #4]
 800319e:	e7b6      	b.n	800310e <_malloc_r+0x4a>
 80031a0:	461a      	mov	r2, r3
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	42a3      	cmp	r3, r4
 80031a6:	d1fb      	bne.n	80031a0 <_malloc_r+0xdc>
 80031a8:	2300      	movs	r3, #0
 80031aa:	6053      	str	r3, [r2, #4]
 80031ac:	e7de      	b.n	800316c <_malloc_r+0xa8>
 80031ae:	230c      	movs	r3, #12
 80031b0:	6033      	str	r3, [r6, #0]
 80031b2:	4630      	mov	r0, r6
 80031b4:	f000 f80c 	bl	80031d0 <__malloc_unlock>
 80031b8:	e794      	b.n	80030e4 <_malloc_r+0x20>
 80031ba:	6005      	str	r5, [r0, #0]
 80031bc:	e7d6      	b.n	800316c <_malloc_r+0xa8>
 80031be:	bf00      	nop
 80031c0:	20000514 	.word	0x20000514

080031c4 <__malloc_lock>:
 80031c4:	4801      	ldr	r0, [pc, #4]	@ (80031cc <__malloc_lock+0x8>)
 80031c6:	f7ff bf01 	b.w	8002fcc <__retarget_lock_acquire_recursive>
 80031ca:	bf00      	nop
 80031cc:	2000050c 	.word	0x2000050c

080031d0 <__malloc_unlock>:
 80031d0:	4801      	ldr	r0, [pc, #4]	@ (80031d8 <__malloc_unlock+0x8>)
 80031d2:	f7ff befc 	b.w	8002fce <__retarget_lock_release_recursive>
 80031d6:	bf00      	nop
 80031d8:	2000050c 	.word	0x2000050c

080031dc <__ssputs_r>:
 80031dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031e0:	688e      	ldr	r6, [r1, #8]
 80031e2:	461f      	mov	r7, r3
 80031e4:	42be      	cmp	r6, r7
 80031e6:	680b      	ldr	r3, [r1, #0]
 80031e8:	4682      	mov	sl, r0
 80031ea:	460c      	mov	r4, r1
 80031ec:	4690      	mov	r8, r2
 80031ee:	d82d      	bhi.n	800324c <__ssputs_r+0x70>
 80031f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80031f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80031f8:	d026      	beq.n	8003248 <__ssputs_r+0x6c>
 80031fa:	6965      	ldr	r5, [r4, #20]
 80031fc:	6909      	ldr	r1, [r1, #16]
 80031fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003202:	eba3 0901 	sub.w	r9, r3, r1
 8003206:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800320a:	1c7b      	adds	r3, r7, #1
 800320c:	444b      	add	r3, r9
 800320e:	106d      	asrs	r5, r5, #1
 8003210:	429d      	cmp	r5, r3
 8003212:	bf38      	it	cc
 8003214:	461d      	movcc	r5, r3
 8003216:	0553      	lsls	r3, r2, #21
 8003218:	d527      	bpl.n	800326a <__ssputs_r+0x8e>
 800321a:	4629      	mov	r1, r5
 800321c:	f7ff ff52 	bl	80030c4 <_malloc_r>
 8003220:	4606      	mov	r6, r0
 8003222:	b360      	cbz	r0, 800327e <__ssputs_r+0xa2>
 8003224:	6921      	ldr	r1, [r4, #16]
 8003226:	464a      	mov	r2, r9
 8003228:	f7ff fed2 	bl	8002fd0 <memcpy>
 800322c:	89a3      	ldrh	r3, [r4, #12]
 800322e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003236:	81a3      	strh	r3, [r4, #12]
 8003238:	6126      	str	r6, [r4, #16]
 800323a:	6165      	str	r5, [r4, #20]
 800323c:	444e      	add	r6, r9
 800323e:	eba5 0509 	sub.w	r5, r5, r9
 8003242:	6026      	str	r6, [r4, #0]
 8003244:	60a5      	str	r5, [r4, #8]
 8003246:	463e      	mov	r6, r7
 8003248:	42be      	cmp	r6, r7
 800324a:	d900      	bls.n	800324e <__ssputs_r+0x72>
 800324c:	463e      	mov	r6, r7
 800324e:	6820      	ldr	r0, [r4, #0]
 8003250:	4632      	mov	r2, r6
 8003252:	4641      	mov	r1, r8
 8003254:	f000 faa8 	bl	80037a8 <memmove>
 8003258:	68a3      	ldr	r3, [r4, #8]
 800325a:	1b9b      	subs	r3, r3, r6
 800325c:	60a3      	str	r3, [r4, #8]
 800325e:	6823      	ldr	r3, [r4, #0]
 8003260:	4433      	add	r3, r6
 8003262:	6023      	str	r3, [r4, #0]
 8003264:	2000      	movs	r0, #0
 8003266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800326a:	462a      	mov	r2, r5
 800326c:	f000 fac6 	bl	80037fc <_realloc_r>
 8003270:	4606      	mov	r6, r0
 8003272:	2800      	cmp	r0, #0
 8003274:	d1e0      	bne.n	8003238 <__ssputs_r+0x5c>
 8003276:	6921      	ldr	r1, [r4, #16]
 8003278:	4650      	mov	r0, sl
 800327a:	f7ff feb7 	bl	8002fec <_free_r>
 800327e:	230c      	movs	r3, #12
 8003280:	f8ca 3000 	str.w	r3, [sl]
 8003284:	89a3      	ldrh	r3, [r4, #12]
 8003286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800328a:	81a3      	strh	r3, [r4, #12]
 800328c:	f04f 30ff 	mov.w	r0, #4294967295
 8003290:	e7e9      	b.n	8003266 <__ssputs_r+0x8a>
	...

08003294 <_svfiprintf_r>:
 8003294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003298:	4698      	mov	r8, r3
 800329a:	898b      	ldrh	r3, [r1, #12]
 800329c:	061b      	lsls	r3, r3, #24
 800329e:	b09d      	sub	sp, #116	@ 0x74
 80032a0:	4607      	mov	r7, r0
 80032a2:	460d      	mov	r5, r1
 80032a4:	4614      	mov	r4, r2
 80032a6:	d510      	bpl.n	80032ca <_svfiprintf_r+0x36>
 80032a8:	690b      	ldr	r3, [r1, #16]
 80032aa:	b973      	cbnz	r3, 80032ca <_svfiprintf_r+0x36>
 80032ac:	2140      	movs	r1, #64	@ 0x40
 80032ae:	f7ff ff09 	bl	80030c4 <_malloc_r>
 80032b2:	6028      	str	r0, [r5, #0]
 80032b4:	6128      	str	r0, [r5, #16]
 80032b6:	b930      	cbnz	r0, 80032c6 <_svfiprintf_r+0x32>
 80032b8:	230c      	movs	r3, #12
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	f04f 30ff 	mov.w	r0, #4294967295
 80032c0:	b01d      	add	sp, #116	@ 0x74
 80032c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032c6:	2340      	movs	r3, #64	@ 0x40
 80032c8:	616b      	str	r3, [r5, #20]
 80032ca:	2300      	movs	r3, #0
 80032cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80032ce:	2320      	movs	r3, #32
 80032d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80032d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80032d8:	2330      	movs	r3, #48	@ 0x30
 80032da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003478 <_svfiprintf_r+0x1e4>
 80032de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80032e2:	f04f 0901 	mov.w	r9, #1
 80032e6:	4623      	mov	r3, r4
 80032e8:	469a      	mov	sl, r3
 80032ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032ee:	b10a      	cbz	r2, 80032f4 <_svfiprintf_r+0x60>
 80032f0:	2a25      	cmp	r2, #37	@ 0x25
 80032f2:	d1f9      	bne.n	80032e8 <_svfiprintf_r+0x54>
 80032f4:	ebba 0b04 	subs.w	fp, sl, r4
 80032f8:	d00b      	beq.n	8003312 <_svfiprintf_r+0x7e>
 80032fa:	465b      	mov	r3, fp
 80032fc:	4622      	mov	r2, r4
 80032fe:	4629      	mov	r1, r5
 8003300:	4638      	mov	r0, r7
 8003302:	f7ff ff6b 	bl	80031dc <__ssputs_r>
 8003306:	3001      	adds	r0, #1
 8003308:	f000 80a7 	beq.w	800345a <_svfiprintf_r+0x1c6>
 800330c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800330e:	445a      	add	r2, fp
 8003310:	9209      	str	r2, [sp, #36]	@ 0x24
 8003312:	f89a 3000 	ldrb.w	r3, [sl]
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 809f 	beq.w	800345a <_svfiprintf_r+0x1c6>
 800331c:	2300      	movs	r3, #0
 800331e:	f04f 32ff 	mov.w	r2, #4294967295
 8003322:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003326:	f10a 0a01 	add.w	sl, sl, #1
 800332a:	9304      	str	r3, [sp, #16]
 800332c:	9307      	str	r3, [sp, #28]
 800332e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003332:	931a      	str	r3, [sp, #104]	@ 0x68
 8003334:	4654      	mov	r4, sl
 8003336:	2205      	movs	r2, #5
 8003338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800333c:	484e      	ldr	r0, [pc, #312]	@ (8003478 <_svfiprintf_r+0x1e4>)
 800333e:	f7fc ff57 	bl	80001f0 <memchr>
 8003342:	9a04      	ldr	r2, [sp, #16]
 8003344:	b9d8      	cbnz	r0, 800337e <_svfiprintf_r+0xea>
 8003346:	06d0      	lsls	r0, r2, #27
 8003348:	bf44      	itt	mi
 800334a:	2320      	movmi	r3, #32
 800334c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003350:	0711      	lsls	r1, r2, #28
 8003352:	bf44      	itt	mi
 8003354:	232b      	movmi	r3, #43	@ 0x2b
 8003356:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800335a:	f89a 3000 	ldrb.w	r3, [sl]
 800335e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003360:	d015      	beq.n	800338e <_svfiprintf_r+0xfa>
 8003362:	9a07      	ldr	r2, [sp, #28]
 8003364:	4654      	mov	r4, sl
 8003366:	2000      	movs	r0, #0
 8003368:	f04f 0c0a 	mov.w	ip, #10
 800336c:	4621      	mov	r1, r4
 800336e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003372:	3b30      	subs	r3, #48	@ 0x30
 8003374:	2b09      	cmp	r3, #9
 8003376:	d94b      	bls.n	8003410 <_svfiprintf_r+0x17c>
 8003378:	b1b0      	cbz	r0, 80033a8 <_svfiprintf_r+0x114>
 800337a:	9207      	str	r2, [sp, #28]
 800337c:	e014      	b.n	80033a8 <_svfiprintf_r+0x114>
 800337e:	eba0 0308 	sub.w	r3, r0, r8
 8003382:	fa09 f303 	lsl.w	r3, r9, r3
 8003386:	4313      	orrs	r3, r2
 8003388:	9304      	str	r3, [sp, #16]
 800338a:	46a2      	mov	sl, r4
 800338c:	e7d2      	b.n	8003334 <_svfiprintf_r+0xa0>
 800338e:	9b03      	ldr	r3, [sp, #12]
 8003390:	1d19      	adds	r1, r3, #4
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	9103      	str	r1, [sp, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	bfbb      	ittet	lt
 800339a:	425b      	neglt	r3, r3
 800339c:	f042 0202 	orrlt.w	r2, r2, #2
 80033a0:	9307      	strge	r3, [sp, #28]
 80033a2:	9307      	strlt	r3, [sp, #28]
 80033a4:	bfb8      	it	lt
 80033a6:	9204      	strlt	r2, [sp, #16]
 80033a8:	7823      	ldrb	r3, [r4, #0]
 80033aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80033ac:	d10a      	bne.n	80033c4 <_svfiprintf_r+0x130>
 80033ae:	7863      	ldrb	r3, [r4, #1]
 80033b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80033b2:	d132      	bne.n	800341a <_svfiprintf_r+0x186>
 80033b4:	9b03      	ldr	r3, [sp, #12]
 80033b6:	1d1a      	adds	r2, r3, #4
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	9203      	str	r2, [sp, #12]
 80033bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80033c0:	3402      	adds	r4, #2
 80033c2:	9305      	str	r3, [sp, #20]
 80033c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003488 <_svfiprintf_r+0x1f4>
 80033c8:	7821      	ldrb	r1, [r4, #0]
 80033ca:	2203      	movs	r2, #3
 80033cc:	4650      	mov	r0, sl
 80033ce:	f7fc ff0f 	bl	80001f0 <memchr>
 80033d2:	b138      	cbz	r0, 80033e4 <_svfiprintf_r+0x150>
 80033d4:	9b04      	ldr	r3, [sp, #16]
 80033d6:	eba0 000a 	sub.w	r0, r0, sl
 80033da:	2240      	movs	r2, #64	@ 0x40
 80033dc:	4082      	lsls	r2, r0
 80033de:	4313      	orrs	r3, r2
 80033e0:	3401      	adds	r4, #1
 80033e2:	9304      	str	r3, [sp, #16]
 80033e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033e8:	4824      	ldr	r0, [pc, #144]	@ (800347c <_svfiprintf_r+0x1e8>)
 80033ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80033ee:	2206      	movs	r2, #6
 80033f0:	f7fc fefe 	bl	80001f0 <memchr>
 80033f4:	2800      	cmp	r0, #0
 80033f6:	d036      	beq.n	8003466 <_svfiprintf_r+0x1d2>
 80033f8:	4b21      	ldr	r3, [pc, #132]	@ (8003480 <_svfiprintf_r+0x1ec>)
 80033fa:	bb1b      	cbnz	r3, 8003444 <_svfiprintf_r+0x1b0>
 80033fc:	9b03      	ldr	r3, [sp, #12]
 80033fe:	3307      	adds	r3, #7
 8003400:	f023 0307 	bic.w	r3, r3, #7
 8003404:	3308      	adds	r3, #8
 8003406:	9303      	str	r3, [sp, #12]
 8003408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800340a:	4433      	add	r3, r6
 800340c:	9309      	str	r3, [sp, #36]	@ 0x24
 800340e:	e76a      	b.n	80032e6 <_svfiprintf_r+0x52>
 8003410:	fb0c 3202 	mla	r2, ip, r2, r3
 8003414:	460c      	mov	r4, r1
 8003416:	2001      	movs	r0, #1
 8003418:	e7a8      	b.n	800336c <_svfiprintf_r+0xd8>
 800341a:	2300      	movs	r3, #0
 800341c:	3401      	adds	r4, #1
 800341e:	9305      	str	r3, [sp, #20]
 8003420:	4619      	mov	r1, r3
 8003422:	f04f 0c0a 	mov.w	ip, #10
 8003426:	4620      	mov	r0, r4
 8003428:	f810 2b01 	ldrb.w	r2, [r0], #1
 800342c:	3a30      	subs	r2, #48	@ 0x30
 800342e:	2a09      	cmp	r2, #9
 8003430:	d903      	bls.n	800343a <_svfiprintf_r+0x1a6>
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0c6      	beq.n	80033c4 <_svfiprintf_r+0x130>
 8003436:	9105      	str	r1, [sp, #20]
 8003438:	e7c4      	b.n	80033c4 <_svfiprintf_r+0x130>
 800343a:	fb0c 2101 	mla	r1, ip, r1, r2
 800343e:	4604      	mov	r4, r0
 8003440:	2301      	movs	r3, #1
 8003442:	e7f0      	b.n	8003426 <_svfiprintf_r+0x192>
 8003444:	ab03      	add	r3, sp, #12
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	462a      	mov	r2, r5
 800344a:	4b0e      	ldr	r3, [pc, #56]	@ (8003484 <_svfiprintf_r+0x1f0>)
 800344c:	a904      	add	r1, sp, #16
 800344e:	4638      	mov	r0, r7
 8003450:	f3af 8000 	nop.w
 8003454:	1c42      	adds	r2, r0, #1
 8003456:	4606      	mov	r6, r0
 8003458:	d1d6      	bne.n	8003408 <_svfiprintf_r+0x174>
 800345a:	89ab      	ldrh	r3, [r5, #12]
 800345c:	065b      	lsls	r3, r3, #25
 800345e:	f53f af2d 	bmi.w	80032bc <_svfiprintf_r+0x28>
 8003462:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003464:	e72c      	b.n	80032c0 <_svfiprintf_r+0x2c>
 8003466:	ab03      	add	r3, sp, #12
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	462a      	mov	r2, r5
 800346c:	4b05      	ldr	r3, [pc, #20]	@ (8003484 <_svfiprintf_r+0x1f0>)
 800346e:	a904      	add	r1, sp, #16
 8003470:	4638      	mov	r0, r7
 8003472:	f000 f879 	bl	8003568 <_printf_i>
 8003476:	e7ed      	b.n	8003454 <_svfiprintf_r+0x1c0>
 8003478:	080038c4 	.word	0x080038c4
 800347c:	080038ce 	.word	0x080038ce
 8003480:	00000000 	.word	0x00000000
 8003484:	080031dd 	.word	0x080031dd
 8003488:	080038ca 	.word	0x080038ca

0800348c <_printf_common>:
 800348c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003490:	4616      	mov	r6, r2
 8003492:	4698      	mov	r8, r3
 8003494:	688a      	ldr	r2, [r1, #8]
 8003496:	690b      	ldr	r3, [r1, #16]
 8003498:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800349c:	4293      	cmp	r3, r2
 800349e:	bfb8      	it	lt
 80034a0:	4613      	movlt	r3, r2
 80034a2:	6033      	str	r3, [r6, #0]
 80034a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80034a8:	4607      	mov	r7, r0
 80034aa:	460c      	mov	r4, r1
 80034ac:	b10a      	cbz	r2, 80034b2 <_printf_common+0x26>
 80034ae:	3301      	adds	r3, #1
 80034b0:	6033      	str	r3, [r6, #0]
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	0699      	lsls	r1, r3, #26
 80034b6:	bf42      	ittt	mi
 80034b8:	6833      	ldrmi	r3, [r6, #0]
 80034ba:	3302      	addmi	r3, #2
 80034bc:	6033      	strmi	r3, [r6, #0]
 80034be:	6825      	ldr	r5, [r4, #0]
 80034c0:	f015 0506 	ands.w	r5, r5, #6
 80034c4:	d106      	bne.n	80034d4 <_printf_common+0x48>
 80034c6:	f104 0a19 	add.w	sl, r4, #25
 80034ca:	68e3      	ldr	r3, [r4, #12]
 80034cc:	6832      	ldr	r2, [r6, #0]
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	42ab      	cmp	r3, r5
 80034d2:	dc26      	bgt.n	8003522 <_printf_common+0x96>
 80034d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80034d8:	6822      	ldr	r2, [r4, #0]
 80034da:	3b00      	subs	r3, #0
 80034dc:	bf18      	it	ne
 80034de:	2301      	movne	r3, #1
 80034e0:	0692      	lsls	r2, r2, #26
 80034e2:	d42b      	bmi.n	800353c <_printf_common+0xb0>
 80034e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80034e8:	4641      	mov	r1, r8
 80034ea:	4638      	mov	r0, r7
 80034ec:	47c8      	blx	r9
 80034ee:	3001      	adds	r0, #1
 80034f0:	d01e      	beq.n	8003530 <_printf_common+0xa4>
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	6922      	ldr	r2, [r4, #16]
 80034f6:	f003 0306 	and.w	r3, r3, #6
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	bf02      	ittt	eq
 80034fe:	68e5      	ldreq	r5, [r4, #12]
 8003500:	6833      	ldreq	r3, [r6, #0]
 8003502:	1aed      	subeq	r5, r5, r3
 8003504:	68a3      	ldr	r3, [r4, #8]
 8003506:	bf0c      	ite	eq
 8003508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800350c:	2500      	movne	r5, #0
 800350e:	4293      	cmp	r3, r2
 8003510:	bfc4      	itt	gt
 8003512:	1a9b      	subgt	r3, r3, r2
 8003514:	18ed      	addgt	r5, r5, r3
 8003516:	2600      	movs	r6, #0
 8003518:	341a      	adds	r4, #26
 800351a:	42b5      	cmp	r5, r6
 800351c:	d11a      	bne.n	8003554 <_printf_common+0xc8>
 800351e:	2000      	movs	r0, #0
 8003520:	e008      	b.n	8003534 <_printf_common+0xa8>
 8003522:	2301      	movs	r3, #1
 8003524:	4652      	mov	r2, sl
 8003526:	4641      	mov	r1, r8
 8003528:	4638      	mov	r0, r7
 800352a:	47c8      	blx	r9
 800352c:	3001      	adds	r0, #1
 800352e:	d103      	bne.n	8003538 <_printf_common+0xac>
 8003530:	f04f 30ff 	mov.w	r0, #4294967295
 8003534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003538:	3501      	adds	r5, #1
 800353a:	e7c6      	b.n	80034ca <_printf_common+0x3e>
 800353c:	18e1      	adds	r1, r4, r3
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	2030      	movs	r0, #48	@ 0x30
 8003542:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003546:	4422      	add	r2, r4
 8003548:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800354c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003550:	3302      	adds	r3, #2
 8003552:	e7c7      	b.n	80034e4 <_printf_common+0x58>
 8003554:	2301      	movs	r3, #1
 8003556:	4622      	mov	r2, r4
 8003558:	4641      	mov	r1, r8
 800355a:	4638      	mov	r0, r7
 800355c:	47c8      	blx	r9
 800355e:	3001      	adds	r0, #1
 8003560:	d0e6      	beq.n	8003530 <_printf_common+0xa4>
 8003562:	3601      	adds	r6, #1
 8003564:	e7d9      	b.n	800351a <_printf_common+0x8e>
	...

08003568 <_printf_i>:
 8003568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800356c:	7e0f      	ldrb	r7, [r1, #24]
 800356e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003570:	2f78      	cmp	r7, #120	@ 0x78
 8003572:	4691      	mov	r9, r2
 8003574:	4680      	mov	r8, r0
 8003576:	460c      	mov	r4, r1
 8003578:	469a      	mov	sl, r3
 800357a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800357e:	d807      	bhi.n	8003590 <_printf_i+0x28>
 8003580:	2f62      	cmp	r7, #98	@ 0x62
 8003582:	d80a      	bhi.n	800359a <_printf_i+0x32>
 8003584:	2f00      	cmp	r7, #0
 8003586:	f000 80d2 	beq.w	800372e <_printf_i+0x1c6>
 800358a:	2f58      	cmp	r7, #88	@ 0x58
 800358c:	f000 80b9 	beq.w	8003702 <_printf_i+0x19a>
 8003590:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003594:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003598:	e03a      	b.n	8003610 <_printf_i+0xa8>
 800359a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800359e:	2b15      	cmp	r3, #21
 80035a0:	d8f6      	bhi.n	8003590 <_printf_i+0x28>
 80035a2:	a101      	add	r1, pc, #4	@ (adr r1, 80035a8 <_printf_i+0x40>)
 80035a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035a8:	08003601 	.word	0x08003601
 80035ac:	08003615 	.word	0x08003615
 80035b0:	08003591 	.word	0x08003591
 80035b4:	08003591 	.word	0x08003591
 80035b8:	08003591 	.word	0x08003591
 80035bc:	08003591 	.word	0x08003591
 80035c0:	08003615 	.word	0x08003615
 80035c4:	08003591 	.word	0x08003591
 80035c8:	08003591 	.word	0x08003591
 80035cc:	08003591 	.word	0x08003591
 80035d0:	08003591 	.word	0x08003591
 80035d4:	08003715 	.word	0x08003715
 80035d8:	0800363f 	.word	0x0800363f
 80035dc:	080036cf 	.word	0x080036cf
 80035e0:	08003591 	.word	0x08003591
 80035e4:	08003591 	.word	0x08003591
 80035e8:	08003737 	.word	0x08003737
 80035ec:	08003591 	.word	0x08003591
 80035f0:	0800363f 	.word	0x0800363f
 80035f4:	08003591 	.word	0x08003591
 80035f8:	08003591 	.word	0x08003591
 80035fc:	080036d7 	.word	0x080036d7
 8003600:	6833      	ldr	r3, [r6, #0]
 8003602:	1d1a      	adds	r2, r3, #4
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6032      	str	r2, [r6, #0]
 8003608:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800360c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003610:	2301      	movs	r3, #1
 8003612:	e09d      	b.n	8003750 <_printf_i+0x1e8>
 8003614:	6833      	ldr	r3, [r6, #0]
 8003616:	6820      	ldr	r0, [r4, #0]
 8003618:	1d19      	adds	r1, r3, #4
 800361a:	6031      	str	r1, [r6, #0]
 800361c:	0606      	lsls	r6, r0, #24
 800361e:	d501      	bpl.n	8003624 <_printf_i+0xbc>
 8003620:	681d      	ldr	r5, [r3, #0]
 8003622:	e003      	b.n	800362c <_printf_i+0xc4>
 8003624:	0645      	lsls	r5, r0, #25
 8003626:	d5fb      	bpl.n	8003620 <_printf_i+0xb8>
 8003628:	f9b3 5000 	ldrsh.w	r5, [r3]
 800362c:	2d00      	cmp	r5, #0
 800362e:	da03      	bge.n	8003638 <_printf_i+0xd0>
 8003630:	232d      	movs	r3, #45	@ 0x2d
 8003632:	426d      	negs	r5, r5
 8003634:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003638:	4859      	ldr	r0, [pc, #356]	@ (80037a0 <_printf_i+0x238>)
 800363a:	230a      	movs	r3, #10
 800363c:	e011      	b.n	8003662 <_printf_i+0xfa>
 800363e:	6821      	ldr	r1, [r4, #0]
 8003640:	6833      	ldr	r3, [r6, #0]
 8003642:	0608      	lsls	r0, r1, #24
 8003644:	f853 5b04 	ldr.w	r5, [r3], #4
 8003648:	d402      	bmi.n	8003650 <_printf_i+0xe8>
 800364a:	0649      	lsls	r1, r1, #25
 800364c:	bf48      	it	mi
 800364e:	b2ad      	uxthmi	r5, r5
 8003650:	2f6f      	cmp	r7, #111	@ 0x6f
 8003652:	4853      	ldr	r0, [pc, #332]	@ (80037a0 <_printf_i+0x238>)
 8003654:	6033      	str	r3, [r6, #0]
 8003656:	bf14      	ite	ne
 8003658:	230a      	movne	r3, #10
 800365a:	2308      	moveq	r3, #8
 800365c:	2100      	movs	r1, #0
 800365e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003662:	6866      	ldr	r6, [r4, #4]
 8003664:	60a6      	str	r6, [r4, #8]
 8003666:	2e00      	cmp	r6, #0
 8003668:	bfa2      	ittt	ge
 800366a:	6821      	ldrge	r1, [r4, #0]
 800366c:	f021 0104 	bicge.w	r1, r1, #4
 8003670:	6021      	strge	r1, [r4, #0]
 8003672:	b90d      	cbnz	r5, 8003678 <_printf_i+0x110>
 8003674:	2e00      	cmp	r6, #0
 8003676:	d04b      	beq.n	8003710 <_printf_i+0x1a8>
 8003678:	4616      	mov	r6, r2
 800367a:	fbb5 f1f3 	udiv	r1, r5, r3
 800367e:	fb03 5711 	mls	r7, r3, r1, r5
 8003682:	5dc7      	ldrb	r7, [r0, r7]
 8003684:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003688:	462f      	mov	r7, r5
 800368a:	42bb      	cmp	r3, r7
 800368c:	460d      	mov	r5, r1
 800368e:	d9f4      	bls.n	800367a <_printf_i+0x112>
 8003690:	2b08      	cmp	r3, #8
 8003692:	d10b      	bne.n	80036ac <_printf_i+0x144>
 8003694:	6823      	ldr	r3, [r4, #0]
 8003696:	07df      	lsls	r7, r3, #31
 8003698:	d508      	bpl.n	80036ac <_printf_i+0x144>
 800369a:	6923      	ldr	r3, [r4, #16]
 800369c:	6861      	ldr	r1, [r4, #4]
 800369e:	4299      	cmp	r1, r3
 80036a0:	bfde      	ittt	le
 80036a2:	2330      	movle	r3, #48	@ 0x30
 80036a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80036a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80036ac:	1b92      	subs	r2, r2, r6
 80036ae:	6122      	str	r2, [r4, #16]
 80036b0:	f8cd a000 	str.w	sl, [sp]
 80036b4:	464b      	mov	r3, r9
 80036b6:	aa03      	add	r2, sp, #12
 80036b8:	4621      	mov	r1, r4
 80036ba:	4640      	mov	r0, r8
 80036bc:	f7ff fee6 	bl	800348c <_printf_common>
 80036c0:	3001      	adds	r0, #1
 80036c2:	d14a      	bne.n	800375a <_printf_i+0x1f2>
 80036c4:	f04f 30ff 	mov.w	r0, #4294967295
 80036c8:	b004      	add	sp, #16
 80036ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	f043 0320 	orr.w	r3, r3, #32
 80036d4:	6023      	str	r3, [r4, #0]
 80036d6:	4833      	ldr	r0, [pc, #204]	@ (80037a4 <_printf_i+0x23c>)
 80036d8:	2778      	movs	r7, #120	@ 0x78
 80036da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	6831      	ldr	r1, [r6, #0]
 80036e2:	061f      	lsls	r7, r3, #24
 80036e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80036e8:	d402      	bmi.n	80036f0 <_printf_i+0x188>
 80036ea:	065f      	lsls	r7, r3, #25
 80036ec:	bf48      	it	mi
 80036ee:	b2ad      	uxthmi	r5, r5
 80036f0:	6031      	str	r1, [r6, #0]
 80036f2:	07d9      	lsls	r1, r3, #31
 80036f4:	bf44      	itt	mi
 80036f6:	f043 0320 	orrmi.w	r3, r3, #32
 80036fa:	6023      	strmi	r3, [r4, #0]
 80036fc:	b11d      	cbz	r5, 8003706 <_printf_i+0x19e>
 80036fe:	2310      	movs	r3, #16
 8003700:	e7ac      	b.n	800365c <_printf_i+0xf4>
 8003702:	4827      	ldr	r0, [pc, #156]	@ (80037a0 <_printf_i+0x238>)
 8003704:	e7e9      	b.n	80036da <_printf_i+0x172>
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	f023 0320 	bic.w	r3, r3, #32
 800370c:	6023      	str	r3, [r4, #0]
 800370e:	e7f6      	b.n	80036fe <_printf_i+0x196>
 8003710:	4616      	mov	r6, r2
 8003712:	e7bd      	b.n	8003690 <_printf_i+0x128>
 8003714:	6833      	ldr	r3, [r6, #0]
 8003716:	6825      	ldr	r5, [r4, #0]
 8003718:	6961      	ldr	r1, [r4, #20]
 800371a:	1d18      	adds	r0, r3, #4
 800371c:	6030      	str	r0, [r6, #0]
 800371e:	062e      	lsls	r6, r5, #24
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	d501      	bpl.n	8003728 <_printf_i+0x1c0>
 8003724:	6019      	str	r1, [r3, #0]
 8003726:	e002      	b.n	800372e <_printf_i+0x1c6>
 8003728:	0668      	lsls	r0, r5, #25
 800372a:	d5fb      	bpl.n	8003724 <_printf_i+0x1bc>
 800372c:	8019      	strh	r1, [r3, #0]
 800372e:	2300      	movs	r3, #0
 8003730:	6123      	str	r3, [r4, #16]
 8003732:	4616      	mov	r6, r2
 8003734:	e7bc      	b.n	80036b0 <_printf_i+0x148>
 8003736:	6833      	ldr	r3, [r6, #0]
 8003738:	1d1a      	adds	r2, r3, #4
 800373a:	6032      	str	r2, [r6, #0]
 800373c:	681e      	ldr	r6, [r3, #0]
 800373e:	6862      	ldr	r2, [r4, #4]
 8003740:	2100      	movs	r1, #0
 8003742:	4630      	mov	r0, r6
 8003744:	f7fc fd54 	bl	80001f0 <memchr>
 8003748:	b108      	cbz	r0, 800374e <_printf_i+0x1e6>
 800374a:	1b80      	subs	r0, r0, r6
 800374c:	6060      	str	r0, [r4, #4]
 800374e:	6863      	ldr	r3, [r4, #4]
 8003750:	6123      	str	r3, [r4, #16]
 8003752:	2300      	movs	r3, #0
 8003754:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003758:	e7aa      	b.n	80036b0 <_printf_i+0x148>
 800375a:	6923      	ldr	r3, [r4, #16]
 800375c:	4632      	mov	r2, r6
 800375e:	4649      	mov	r1, r9
 8003760:	4640      	mov	r0, r8
 8003762:	47d0      	blx	sl
 8003764:	3001      	adds	r0, #1
 8003766:	d0ad      	beq.n	80036c4 <_printf_i+0x15c>
 8003768:	6823      	ldr	r3, [r4, #0]
 800376a:	079b      	lsls	r3, r3, #30
 800376c:	d413      	bmi.n	8003796 <_printf_i+0x22e>
 800376e:	68e0      	ldr	r0, [r4, #12]
 8003770:	9b03      	ldr	r3, [sp, #12]
 8003772:	4298      	cmp	r0, r3
 8003774:	bfb8      	it	lt
 8003776:	4618      	movlt	r0, r3
 8003778:	e7a6      	b.n	80036c8 <_printf_i+0x160>
 800377a:	2301      	movs	r3, #1
 800377c:	4632      	mov	r2, r6
 800377e:	4649      	mov	r1, r9
 8003780:	4640      	mov	r0, r8
 8003782:	47d0      	blx	sl
 8003784:	3001      	adds	r0, #1
 8003786:	d09d      	beq.n	80036c4 <_printf_i+0x15c>
 8003788:	3501      	adds	r5, #1
 800378a:	68e3      	ldr	r3, [r4, #12]
 800378c:	9903      	ldr	r1, [sp, #12]
 800378e:	1a5b      	subs	r3, r3, r1
 8003790:	42ab      	cmp	r3, r5
 8003792:	dcf2      	bgt.n	800377a <_printf_i+0x212>
 8003794:	e7eb      	b.n	800376e <_printf_i+0x206>
 8003796:	2500      	movs	r5, #0
 8003798:	f104 0619 	add.w	r6, r4, #25
 800379c:	e7f5      	b.n	800378a <_printf_i+0x222>
 800379e:	bf00      	nop
 80037a0:	080038d5 	.word	0x080038d5
 80037a4:	080038e6 	.word	0x080038e6

080037a8 <memmove>:
 80037a8:	4288      	cmp	r0, r1
 80037aa:	b510      	push	{r4, lr}
 80037ac:	eb01 0402 	add.w	r4, r1, r2
 80037b0:	d902      	bls.n	80037b8 <memmove+0x10>
 80037b2:	4284      	cmp	r4, r0
 80037b4:	4623      	mov	r3, r4
 80037b6:	d807      	bhi.n	80037c8 <memmove+0x20>
 80037b8:	1e43      	subs	r3, r0, #1
 80037ba:	42a1      	cmp	r1, r4
 80037bc:	d008      	beq.n	80037d0 <memmove+0x28>
 80037be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037c6:	e7f8      	b.n	80037ba <memmove+0x12>
 80037c8:	4402      	add	r2, r0
 80037ca:	4601      	mov	r1, r0
 80037cc:	428a      	cmp	r2, r1
 80037ce:	d100      	bne.n	80037d2 <memmove+0x2a>
 80037d0:	bd10      	pop	{r4, pc}
 80037d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037da:	e7f7      	b.n	80037cc <memmove+0x24>

080037dc <_sbrk_r>:
 80037dc:	b538      	push	{r3, r4, r5, lr}
 80037de:	4d06      	ldr	r5, [pc, #24]	@ (80037f8 <_sbrk_r+0x1c>)
 80037e0:	2300      	movs	r3, #0
 80037e2:	4604      	mov	r4, r0
 80037e4:	4608      	mov	r0, r1
 80037e6:	602b      	str	r3, [r5, #0]
 80037e8:	f7fd f9ba 	bl	8000b60 <_sbrk>
 80037ec:	1c43      	adds	r3, r0, #1
 80037ee:	d102      	bne.n	80037f6 <_sbrk_r+0x1a>
 80037f0:	682b      	ldr	r3, [r5, #0]
 80037f2:	b103      	cbz	r3, 80037f6 <_sbrk_r+0x1a>
 80037f4:	6023      	str	r3, [r4, #0]
 80037f6:	bd38      	pop	{r3, r4, r5, pc}
 80037f8:	20000508 	.word	0x20000508

080037fc <_realloc_r>:
 80037fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003800:	4680      	mov	r8, r0
 8003802:	4615      	mov	r5, r2
 8003804:	460c      	mov	r4, r1
 8003806:	b921      	cbnz	r1, 8003812 <_realloc_r+0x16>
 8003808:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800380c:	4611      	mov	r1, r2
 800380e:	f7ff bc59 	b.w	80030c4 <_malloc_r>
 8003812:	b92a      	cbnz	r2, 8003820 <_realloc_r+0x24>
 8003814:	f7ff fbea 	bl	8002fec <_free_r>
 8003818:	2400      	movs	r4, #0
 800381a:	4620      	mov	r0, r4
 800381c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003820:	f000 f81a 	bl	8003858 <_malloc_usable_size_r>
 8003824:	4285      	cmp	r5, r0
 8003826:	4606      	mov	r6, r0
 8003828:	d802      	bhi.n	8003830 <_realloc_r+0x34>
 800382a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800382e:	d8f4      	bhi.n	800381a <_realloc_r+0x1e>
 8003830:	4629      	mov	r1, r5
 8003832:	4640      	mov	r0, r8
 8003834:	f7ff fc46 	bl	80030c4 <_malloc_r>
 8003838:	4607      	mov	r7, r0
 800383a:	2800      	cmp	r0, #0
 800383c:	d0ec      	beq.n	8003818 <_realloc_r+0x1c>
 800383e:	42b5      	cmp	r5, r6
 8003840:	462a      	mov	r2, r5
 8003842:	4621      	mov	r1, r4
 8003844:	bf28      	it	cs
 8003846:	4632      	movcs	r2, r6
 8003848:	f7ff fbc2 	bl	8002fd0 <memcpy>
 800384c:	4621      	mov	r1, r4
 800384e:	4640      	mov	r0, r8
 8003850:	f7ff fbcc 	bl	8002fec <_free_r>
 8003854:	463c      	mov	r4, r7
 8003856:	e7e0      	b.n	800381a <_realloc_r+0x1e>

08003858 <_malloc_usable_size_r>:
 8003858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800385c:	1f18      	subs	r0, r3, #4
 800385e:	2b00      	cmp	r3, #0
 8003860:	bfbc      	itt	lt
 8003862:	580b      	ldrlt	r3, [r1, r0]
 8003864:	18c0      	addlt	r0, r0, r3
 8003866:	4770      	bx	lr

08003868 <_init>:
 8003868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386a:	bf00      	nop
 800386c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386e:	bc08      	pop	{r3}
 8003870:	469e      	mov	lr, r3
 8003872:	4770      	bx	lr

08003874 <_fini>:
 8003874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003876:	bf00      	nop
 8003878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387a:	bc08      	pop	{r3}
 800387c:	469e      	mov	lr, r3
 800387e:	4770      	bx	lr
